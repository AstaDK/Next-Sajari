import { SearchProvider } from '@sajari/react-hooks';
import { ThemeProvider, createContext } from '@sajari/react-sdk-utils';
import { useState, useEffect } from 'react';
import { LiveAnnouncer } from 'react-aria-live';
import { I18nextProvider } from 'react-i18next';
import i18n from '../i18n/index.esm.js';
import { jsx } from '@emotion/core/jsx-runtime';

var _createContext = /*#__PURE__*/createContext({
  strict: true,
  name: 'PipelineContext'
}),
    Provider = _createContext[0],
    useSearchUIContext = _createContext[1];

var ContextProvider = function ContextProvider(_ref) {
  var children = _ref.children,
      search = _ref.search,
      autocomplete = _ref.autocomplete,
      defaultFilter = _ref.defaultFilter,
      searchOnLoad = _ref.searchOnLoad,
      initialResponse = _ref.initialResponse,
      _ref$ratingMax = _ref.ratingMax,
      ratingMax = _ref$ratingMax === void 0 ? 5 : _ref$ratingMax,
      _ref$currency = _ref.currency,
      currency = _ref$currency === void 0 ? 'USD' : _ref$currency,
      theme = _ref.theme,
      importantStyles = _ref.importantStyles,
      _ref$disableDefaultSt = _ref.disableDefaultStyles,
      disableDefaultStyles = _ref$disableDefaultSt === void 0 ? false : _ref$disableDefaultSt,
      _ref$customClassNames = _ref.customClassNames,
      customClassNames = _ref$customClassNames === void 0 ? {} : _ref$customClassNames,
      _ref$viewType = _ref.viewType,
      viewTypeProp = _ref$viewType === void 0 ? 'list' : _ref$viewType;

  var _useState = useState(i18n.language),
      language = _useState[0],
      setLanguage = _useState[1];

  var _useState2 = useState(viewTypeProp),
      viewType = _useState2[0],
      setViewType = _useState2[1];

  useEffect(function () {
    var event = 'languageChanged';
    i18n.on(event, setLanguage);
    return function () {
      i18n.off(event);
    };
  }, []);
  useEffect(function () {
    setViewType(viewTypeProp);
  }, [viewTypeProp]);
  return jsx(Provider, {
    value: {
      tracking: search.pipeline.getTracking(),
      disableDefaultStyles: disableDefaultStyles,
      currency: currency,
      customClassNames: customClassNames,
      language: language,
      ratingMax: ratingMax,
      viewType: viewType,
      setViewType: setViewType
    },
    children: jsx(SearchProvider, {
      search: search,
      autocomplete: autocomplete,
      defaultFilter: defaultFilter,
      searchOnLoad: searchOnLoad,
      initialResponse: initialResponse,
      children: jsx(LiveAnnouncer, {
        children: jsx(I18nextProvider, {
          i18n: i18n,
          children: jsx(ThemeProvider, {
            theme: theme,
            importantStyles: importantStyles,
            children: children
          })
        })
      })
    })
  });
};

export default ContextProvider;
export { useSearchUIContext };
//# sourceMappingURL=index.esm.js.map
