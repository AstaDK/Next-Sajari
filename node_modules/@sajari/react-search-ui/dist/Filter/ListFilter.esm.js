import { useFilter, useQuery } from '@sajari/react-hooks';
import { isBoolean, useTheme, getStylesObject, isSSR, noop, isEmpty } from '@sajari/react-sdk-utils';
import { useState, useEffect, useMemo, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import { jsxs, jsx } from '@emotion/core/jsx-runtime';
import { useSearchUIContext } from '../ContextProvider/index.esm.js';
import { Box, Combobox, CheckboxGroup, RadioGroup, Button, Checkbox, Radio } from '@sajari/react-components';
import { pinItems, formatLabel, getHeaderId } from './utils.esm.js';
import Box$1 from './Box.esm.js';
import IconSmallChevronDown from '../assets/icons/small-chevron-down.esm.js';
import IconSmallChevronUp from '../assets/icons/small-chevron-up.esm.js';
import '../assets/icons/small-grid.esm.js';
import '../assets/icons/small-list.esm.js';

var ListFilter = function ListFilter(props) {
  var _customClassNames$fil, _customClassNames$fil2, _customClassNames$fil3, _customClassNames$fil4, _customClassNames$fil5, _customClassNames$fil6, _customClassNames$fil7, _customClassNames$fil8, _customClassNames$fil9, _customClassNames$fil10;

  var name = props.name,
      title = props.title,
      _props$limit = props.limit,
      limit = _props$limit === void 0 ? 10 : _props$limit,
      _props$sort = props.sort,
      sort = _props$sort === void 0 ? 'count' : _props$sort,
      _props$sortAscending = props.sortAscending,
      sortAscending = _props$sortAscending === void 0 ? sort !== 'count' : _props$sortAscending,
      itemRender = props.itemRender,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,
      format = props.format;
  var filterContainerId = "list-" + name;

  var _useFilter = useFilter(name, {
    sort: sort,
    sortAscending: sortAscending
  }),
      options = _useFilter.options,
      reset = _useFilter.reset,
      setSelected = _useFilter.setSelected,
      selected = _useFilter.selected,
      multi = _useFilter.multi;

  var _props$searchable = props.searchable,
      searchable = _props$searchable === void 0 ? options.length > limit : _props$searchable;
  var pinSelected = props.pinSelected;

  if (!isBoolean(pinSelected)) {
    pinSelected = options.length > limit;
  }

  var _React$useState = useState(''),
      lastFocusedControl = _React$useState[0],
      setLastFocusedControl = _React$useState[1];

  var _React$useState2 = useState(''),
      query = _React$useState2[0],
      setQuery = _React$useState2[1];

  var _useQuery = useQuery(),
      q = _useQuery.query;

  var _React$useState3 = useState(limit),
      shown = _React$useState3[0],
      setShown = _React$useState3[1];

  var _useSearchUIContext = useSearchUIContext(),
      _useSearchUIContext$d = _useSearchUIContext.disableDefaultStyles,
      disableDefaultStyles = _useSearchUIContext$d === void 0 ? false : _useSearchUIContext$d,
      customClassNames = _useSearchUIContext.customClassNames,
      currency = _useSearchUIContext.currency,
      language = _useSearchUIContext.language;

  var theme = useTheme();

  var _useTranslation = useTranslation('filter'),
      t = _useTranslation.t;

  var styles = getStylesObject({
    innerList: [{
      "display": "flex",
      "alignItems": "center",
      "justifyContent": "space-between"
    }],
    count: [{
      "marginLeft": "0.5rem",
      "fontSize": "0.75rem",
      "--text-opacity": "1",
      "color": "rgba(159, 166, 178, var(--text-opacity))"
    }],
    checkbox: [{
      "fontSize": "0.875rem"
    }],
    searchWrapper: [{
      "marginBottom": "0.5rem"
    }],
    toggleButtonWrapper: [{
      "marginTop": "0.25rem"
    }],
    toggleIcon: [{
      "marginLeft": "0.5rem"
    }, "color: " + theme.color.primary.base]
  }, disableDefaultStyles);
  useEffect(function () {
    setQuery('');
  }, [q]);
  useEffect(function () {
    setShown(limit);
  }, [query, q]);
  useEffect(function () {
    if (!isSSR() && pinSelected) {
      var _document$querySelect;

      var input = (_document$querySelect = document.querySelector("#" + filterContainerId)) == null ? void 0 : _document$querySelect.querySelector("input[value=\"" + lastFocusedControl + "\"]");
      input == null ? void 0 : input.focus();
    }
  }, [JSON.stringify(selected)]);
  var Control = multi ? Checkbox : Radio;
  var filtered = searchable ? options.filter(function (o) {
    return o.label.toLowerCase().includes(query.toLowerCase());
  }) : options;
  var slice = filtered.length > limit;
  var transformedItems = useMemo(function () {
    if (!isSSR() && pinSelected) {
      setLastFocusedControl("" + document.activeElement.value);
    }

    var list = filtered;

    if (pinSelected) {
      list = pinItems(list, selected, 'label');
    }

    return list;
  }, [JSON.stringify(filtered), JSON.stringify(selected), pinSelected]);
  var items = slice ? transformedItems.slice(0, shown) : transformedItems;
  var allShown = shown >= filtered.length;
  var Icon = allShown ? IconSmallChevronUp : IconSmallChevronDown;
  var showMore = useCallback(function () {
    if (allShown) {
      setShown(limit);
    } else {
      setShown(function (s) {
        return s + 20;
      });
    }
  }, [allShown]);
  var innerList = useMemo(function () {
    return items.map(function (_ref) {
      var label = _ref.label,
          count = _ref.count;
      return jsxs(Box, {
        css: styles.innerList,
        children: [jsx(Control, {
          value: label,
          checked: selected.includes(label),
          onChange: noop,
          css: styles.checkbox,
          disableDefaultStyles: disableDefaultStyles,
          children: typeof itemRender === 'function' ? itemRender(label) : formatLabel(label, {
            format: format,
            currency: currency,
            t: t
          })
        }), jsx("span", {
          css: styles.count,
          children: count.toLocaleString(language)
        })]
      }, label + "-" + count);
    });
  }, [JSON.stringify(items), itemRender, selected]);
  var filterSearchOnChange = useCallback(function (value) {
    setQuery(value || '');
  }, []);

  if (isEmpty(options) && isEmpty(selected)) {
    return null;
  }

  return jsxs(Box$1, {
    title: title,
    name: name,
    showReset: selected.length > 0 && multi,
    onReset: reset,
    children: [searchable ? jsx(Box, {
      css: styles.searchWrapper,
      children: jsx(Combobox, {
        value: query,
        size: "sm",
        className: (_customClassNames$fil = customClassNames.filter) == null ? void 0 : (_customClassNames$fil2 = _customClassNames$fil.list) == null ? void 0 : _customClassNames$fil2.searchFilter,
        placeholder: placeholder,
        onChange: filterSearchOnChange,
        disableDefaultStyles: disableDefaultStyles
      })
    }) : null, jsx(Box, {
      id: filterContainerId,
      className: (_customClassNames$fil3 = customClassNames.filter) == null ? void 0 : (_customClassNames$fil4 = _customClassNames$fil3.list) == null ? void 0 : _customClassNames$fil4.container,
      children: multi ? jsx(CheckboxGroup, {
        value: selected,
        onChange: setSelected,
        className: (_customClassNames$fil5 = customClassNames.filter) == null ? void 0 : (_customClassNames$fil6 = _customClassNames$fil5.list) == null ? void 0 : _customClassNames$fil6.checkboxGroup,
        disableDefaultStyles: disableDefaultStyles,
        "aria-labelledby": getHeaderId(name),
        children: innerList
      }) : jsx(RadioGroup, {
        value: selected[0],
        onChange: function onChange(e) {
          return setSelected([e.target.value]);
        },
        className: (_customClassNames$fil7 = customClassNames.filter) == null ? void 0 : (_customClassNames$fil8 = _customClassNames$fil7.list) == null ? void 0 : _customClassNames$fil8.radioGroup,
        disableDefaultStyles: disableDefaultStyles,
        "aria-labelledby": getHeaderId(name),
        children: innerList
      })
    }), slice ? jsx(Box, {
      css: styles.toggleButtonWrapper,
      children: jsxs(Button, {
        appearance: "link",
        onClick: showMore,
        "aria-controls": filterContainerId,
        size: "sm",
        spacing: "none",
        className: (_customClassNames$fil9 = customClassNames.filter) == null ? void 0 : (_customClassNames$fil10 = _customClassNames$fil9.list) == null ? void 0 : _customClassNames$fil10.toggleButton,
        disableDefaultStyles: disableDefaultStyles,
        children: [t(allShown ? 'showLess' : 'showMore'), jsx(Icon, {
          css: styles.toggleIcon
        })]
      })
    }) : null]
  });
};

export default ListFilter;
//# sourceMappingURL=ListFilter.esm.js.map
