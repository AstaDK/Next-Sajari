import { useFilter } from '@sajari/react-hooks';
import { isEmpty, isArray } from '@sajari/react-sdk-utils';
import 'react';
import { useTranslation } from 'react-i18next';
import { jsx } from '@emotion/core/jsx-runtime';
import { useSearchUIContext } from '../ContextProvider/index.esm.js';
import { Select, Option } from '@sajari/react-components';
import { formatLabel } from './utils.esm.js';
import Box from './Box.esm.js';

var SelectFilter = function SelectFilter(props) {
  var _customClassNames$fil, _customClassNames$fil2, _customClassNames$fil3, _customClassNames$fil4, _customClassNames$fil5, _customClassNames$fil6, _customClassNames$fil7, _customClassNames$fil8;

  var name = props.name,
      title = props.title,
      _props$sort = props.sort,
      sort = _props$sort === void 0 ? 'count' : _props$sort,
      _props$sortAscending = props.sortAscending,
      sortAscending = _props$sortAscending === void 0 ? sort !== 'count' : _props$sortAscending,
      format = props.format;

  var _useFilter = useFilter(name, {
    sort: sort,
    sortAscending: sortAscending
  }),
      options = _useFilter.options,
      reset = _useFilter.reset,
      setSelected = _useFilter.setSelected,
      selected = _useFilter.selected,
      multi = _useFilter.multi;

  var _useSearchUIContext = useSearchUIContext(),
      _useSearchUIContext$d = _useSearchUIContext.disableDefaultStyles,
      disableDefaultStyles = _useSearchUIContext$d === void 0 ? false : _useSearchUIContext$d,
      customClassNames = _useSearchUIContext.customClassNames,
      currency = _useSearchUIContext.currency;

  var _useTranslation = useTranslation('filter'),
      t = _useTranslation.t;

  if (isEmpty(options) && isEmpty(selected)) {
    return null;
  }

  var getSelectText = function getSelectText(labels) {
    if (!labels.length) {
      return t('select');
    }

    if (labels.length === 1) {
      var first = labels[0];
      return first;
    }

    return t('selected', {
      count: labels.length.toLocaleString()
    });
  };

  return jsx(Box, {
    title: title,
    name: name,
    showReset: selected.length > 0 && multi,
    onReset: reset,
    children: !isEmpty(options) && jsx(Select, {
      multiple: multi,
      onChange: function onChange(value) {
        return setSelected(isArray(value) ? value : [value]);
      },
      value: selected,
      disableDefaultStyles: disableDefaultStyles,
      size: "sm",
      text: getSelectText,
      className: (_customClassNames$fil = customClassNames.filter) == null ? void 0 : (_customClassNames$fil2 = _customClassNames$fil.select) == null ? void 0 : _customClassNames$fil2.container,
      buttonClassName: (_customClassNames$fil3 = customClassNames.filter) == null ? void 0 : (_customClassNames$fil4 = _customClassNames$fil3.select) == null ? void 0 : _customClassNames$fil4.button,
      dropdownClassName: (_customClassNames$fil5 = customClassNames.filter) == null ? void 0 : (_customClassNames$fil6 = _customClassNames$fil5.select) == null ? void 0 : _customClassNames$fil6.dropdown,
      optionClassName: (_customClassNames$fil7 = customClassNames.filter) == null ? void 0 : (_customClassNames$fil8 = _customClassNames$fil7.select) == null ? void 0 : _customClassNames$fil8.option,
      children: options.map(function (_ref) {
        var value = _ref.value,
            label = _ref.label,
            count = _ref.count;
        return jsx(Option, {
          value: label,
          label: count.toLocaleString(),
          children: formatLabel(label, {
            format: format,
            currency: currency,
            t: t
          })
        }, value);
      })
    })
  });
};

export default SelectFilter;
//# sourceMappingURL=SelectFilter.esm.js.map
