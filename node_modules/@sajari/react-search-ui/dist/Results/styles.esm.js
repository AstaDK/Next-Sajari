import { inferStylesObjectKeys, isNumber, isObject, clamp, mapStyles } from '@sajari/react-sdk-utils';

function findBreakpoint(breakpoints, target) {
  var match = Object.keys(breakpoints).map(Number).sort(function (a, b) {
    return b - a;
  }).find(function (s) {
    return s <= target;
  });
  return match ? breakpoints[match] : null;
}

function useResultsStyles(_ref) {
  var _ref$appearance = _ref.appearance,
      appearance = _ref$appearance === void 0 ? 'list' : _ref$appearance,
      _ref$columnMinWidth = _ref.columnMinWidth,
      columnMinWidth = _ref$columnMinWidth === void 0 ? 240 : _ref$columnMinWidth,
      columnsProp = _ref.columns,
      _ref$gap = _ref.gap,
      gapProp = _ref$gap === void 0 ? appearance === 'list' ? {
    0: 4,
    640: 8
  } : undefined : _ref$gap,
      width = _ref.width;
  var styles = inferStylesObjectKeys({
    container: []
  });

  if (appearance === 'list') {
    styles.container.push({
      "display": "flex",
      "flexDirection": "column"
    });
    var spaceY = 4;

    if (gapProp) {
      if (isNumber(gapProp)) {
        spaceY = gapProp;
      } else if (isObject(gapProp)) {
        var match = findBreakpoint(gapProp, width);

        if (match) {
          spaceY = match;
        }
      }

      switch (spaceY) {
        case 1:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(0.25rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(0.25rem * var(--space-y-reverse))"
            }
          });
          break;

        case 2:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(0.5rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(0.5rem * var(--space-y-reverse))"
            }
          });
          break;

        case 3:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(0.75rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(0.75rem * var(--space-y-reverse))"
            }
          });
          break;

        case 4:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(1rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(1rem * var(--space-y-reverse))"
            }
          });
          break;

        case 5:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(1.25rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(1.25rem * var(--space-y-reverse))"
            }
          });
          break;

        case 6:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(1.5rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(1.5rem * var(--space-y-reverse))"
            }
          });
          break;

        case 7:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(1.75rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(1.75rem * var(--space-y-reverse))"
            }
          });
          break;

        case 8:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(2rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(2rem * var(--space-y-reverse))"
            }
          });
          break;

        case 9:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(2.25rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(2.25rem * var(--space-y-reverse))"
            }
          });
          break;

        case 10:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(2.5rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(2.5rem * var(--space-y-reverse))"
            }
          });
          break;

        case 11:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(2.75rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(2.75rem * var(--space-y-reverse))"
            }
          });
          break;

        case 12:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(3rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(3rem * var(--space-y-reverse))"
            }
          });
          break;

        default:
          styles.container.push({
            "> :not(template) ~ :not(template)": {
              "--space-y-reverse": 0,
              "marginTop": "calc(1rem * calc(1 - var(--space-y-reverse)))",
              "marginBottom": "calc(1rem * var(--space-y-reverse))"
            }
          });
          break;
      }
    }
  } else if (appearance === 'grid') {
    styles.container.push({
      "display": "grid"
    });
    var columns = 1;
    var gap = 8;

    if (columnsProp) {
      if (isNumber(columnsProp)) {
        columns = columnsProp;
      } else if (isObject(columnsProp)) {
        var _match = findBreakpoint(columnsProp, width);

        if (_match) {
          columns = _match;
        }
      }
    } else if (isNumber(columnMinWidth)) {
      columns = clamp(Math.floor(width / columnMinWidth), 1, 12);
    }

    if (gapProp) {
      if (isNumber(gapProp)) {
        gap = gapProp;
      } else if (isObject(gapProp)) {
        var _match2 = findBreakpoint(gapProp, width);

        if (_match2) {
          gap = _match2;
        }
      }
    }

    switch (columns) {
      case 1:
        styles.container.push({
          "gridTemplateColumns": "repeat(1, minmax(0, 1fr))"
        });
        break;

      case 2:
        styles.container.push({
          "gridTemplateColumns": "repeat(2, minmax(0, 1fr))"
        });
        break;

      case 3:
        styles.container.push({
          "gridTemplateColumns": "repeat(3, minmax(0, 1fr))"
        });
        break;

      case 4:
        styles.container.push({
          "gridTemplateColumns": "repeat(4, minmax(0, 1fr))"
        });
        break;

      case 5:
        styles.container.push({
          "gridTemplateColumns": "repeat(5, minmax(0, 1fr))"
        });
        break;

      case 6:
        styles.container.push({
          "gridTemplateColumns": "repeat(6, minmax(0, 1fr))"
        });
        break;

      case 7:
        styles.container.push({
          "gridTemplateColumns": "repeat(7, minmax(0, 1fr))"
        });
        break;

      case 8:
        styles.container.push({
          "gridTemplateColumns": "repeat(8, minmax(0, 1fr))"
        });
        break;

      case 9:
        styles.container.push({
          "gridTemplateColumns": "repeat(9, minmax(0, 1fr))"
        });
        break;

      case 10:
        styles.container.push({
          "gridTemplateColumns": "repeat(10, minmax(0, 1fr))"
        });
        break;

      case 11:
        styles.container.push({
          "gridTemplateColumns": "repeat(11, minmax(0, 1fr))"
        });
        break;

      case 12:
        styles.container.push({
          "gridTemplateColumns": "repeat(12, minmax(0, 1fr))"
        });
        break;

      default:
        styles.container.push({
          "gridTemplateColumns": "repeat(1, minmax(0, 1fr))"
        });
        break;
    }

    switch (gap) {
      case 1:
        styles.container.push({
          "gap": "0.25rem"
        });
        break;

      case 2:
        styles.container.push({
          "gap": "0.5rem"
        });
        break;

      case 3:
        styles.container.push({
          "gap": "0.75rem"
        });
        break;

      case 4:
        styles.container.push({
          "gap": "1rem"
        });
        break;

      case 5:
        styles.container.push({
          "gap": "1.25rem"
        });
        break;

      case 6:
        styles.container.push({
          "gap": "1.5rem"
        });
        break;

      case 7:
        styles.container.push({
          "gap": "1.75rem"
        });
        break;

      case 8:
        styles.container.push({
          "gap": "2rem"
        });
        break;

      case 9:
        styles.container.push({
          "gap": "2.25rem"
        });
        break;

      case 10:
        styles.container.push({
          "gap": "2.5rem"
        });
        break;

      case 11:
        styles.container.push({
          "gap": "2.75rem"
        });
        break;

      case 12:
        styles.container.push({
          "gap": "3rem"
        });
        break;

      default:
        styles.container.push({
          "gap": "2rem"
        });
        break;
    }
  }

  return mapStyles(styles);
}

export default useResultsStyles;
//# sourceMappingURL=styles.esm.js.map
