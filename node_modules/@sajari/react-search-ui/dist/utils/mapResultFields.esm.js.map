{"version":3,"file":"mapResultFields.esm.js","sources":["../../src/utils/mapResultFields.ts"],"sourcesContent":["import { FieldDictionary } from '@sajari/react-hooks';\nimport { Result } from '@sajari/sdk-js';\n\n// TODO: Handle mapping arrays in templates\n// e.g. `https://x.com/path/${name}` where name is an array (e.g. ['x', 'y']) should return ['https://x.com/path/x', 'https://x.com/path/y']\nconst fillTemplate = <T = Record<string, string | string[]>>(template: string, variables: T) =>\n  template.replace(/\\${(.*?)}/g, (_, g: string) => variables[g].toString());\n\nexport function mapFields<T = Record<string, string | string[] | null>>(values: T, fields: FieldDictionary = {}) {\n  return Object.entries(fields).reduce(\n    (mapped, [to, from]) => {\n      let value: string | null;\n      if (from === false) {\n        value = null;\n      } else if (Array.isArray(from)) {\n        const match = from.find((f) => Object.keys(values).includes(f)) as string;\n        value = values[match];\n      } else if (typeof from === 'function') {\n        value = from(values);\n      } else if (/\\${.+}/.test(from)) {\n        value = fillTemplate<T>(from, values);\n      } else if (from.startsWith('!function')) {\n        const functionBody = from.replace('!function', '');\n        // eslint-disable-next-line @typescript-eslint/no-implied-eval\n        const func = new Function('data', functionBody);\n        value = func(values);\n      } else {\n        value = values[from];\n      }\n\n      return {\n        ...mapped,\n        [to]: value,\n      };\n    },\n    { ...values },\n  );\n}\n\nexport default function mapResultFields<T = Record<string, string | string[]>>(\n  results: Result[],\n  fields: FieldDictionary,\n) {\n  return results.map(({ values, ...rest }) => ({\n    ...rest,\n    values: mapFields<T>((values as unknown) as T, fields),\n  }));\n}\n"],"names":["fillTemplate","template","variables","replace","_","g","toString","mapFields","values","fields","Object","entries","reduce","mapped","to","from","value","Array","isArray","match","find","f","keys","includes","test","startsWith","functionBody","func","Function","mapResultFields","results","map","rest"],"mappings":";;AAKA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAwCC,QAAxC,EAA0DC,SAA1D;AAAA,SACnBD,QAAQ,CAACE,OAAT,CAAiB,YAAjB,EAA+B,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAkBH,SAAS,CAACG,CAAD,CAAT,CAAaC,QAAb,EAAlB;AAAA,GAA/B,CADmB;AAAA,CAArB;;SAGgBC,UAAwDC,QAAWC;MAAAA;AAAAA,IAAAA,SAA0B;;;AAC3G,SAAOC,MAAM,CAACC,OAAP,CAAeF,MAAf,EAAuBG,MAAvB,CACL,UAACC,MAAD;;;QAAUC;QAAIC;AACZ,QAAIC,KAAJ;;AACA,QAAID,IAAI,KAAK,KAAb,EAAoB;AAClBC,MAAAA,KAAK,GAAG,IAAR;AACD,KAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AAC9B,UAAMI,KAAK,GAAGJ,IAAI,CAACK,IAAL,CAAU,UAACC,CAAD;AAAA,eAAOX,MAAM,CAACY,IAAP,CAAYd,MAAZ,EAAoBe,QAApB,CAA6BF,CAA7B,CAAP;AAAA,OAAV,CAAd;AACAL,MAAAA,KAAK,GAAGR,MAAM,CAACW,KAAD,CAAd;AACD,KAHM,MAGA,IAAI,OAAOJ,IAAP,KAAgB,UAApB,EAAgC;AACrCC,MAAAA,KAAK,GAAGD,IAAI,CAACP,MAAD,CAAZ;AACD,KAFM,MAEA,IAAI,SAASgB,IAAT,CAAcT,IAAd,CAAJ,EAAyB;AAC9BC,MAAAA,KAAK,GAAGhB,YAAY,CAAIe,IAAJ,EAAUP,MAAV,CAApB;AACD,KAFM,MAEA,IAAIO,IAAI,CAACU,UAAL,CAAgB,WAAhB,CAAJ,EAAkC;AACvC,UAAMC,YAAY,GAAGX,IAAI,CAACZ,OAAL,CAAa,WAAb,EAA0B,EAA1B,CAArB;AAEA,UAAMwB,IAAI,GAAG,IAAIC,QAAJ,CAAa,MAAb,EAAqBF,YAArB,CAAb;AACAV,MAAAA,KAAK,GAAGW,IAAI,CAACnB,MAAD,CAAZ;AACD,KALM,MAKA;AACLQ,MAAAA,KAAK,GAAGR,MAAM,CAACO,IAAD,CAAd;AACD;;AAED,wBACKF,MADL,6BAEGC,EAFH,IAEQE,KAFR;AAID,GAzBI,eA0BAR,MA1BA,EAAP;AA4BD;SAEuBqB,gBACtBC,SACArB;AAEA,SAAOqB,OAAO,CAACC,GAAR,CAAY;AAAA,QAAGvB,MAAH,SAAGA,MAAH;AAAA,QAAcwB,IAAd;;AAAA,wBACdA,IADc;AAEjBxB,MAAAA,MAAM,EAAED,SAAS,CAAKC,MAAL,EAA8BC,MAA9B;AAFA;AAAA,GAAZ,CAAP;AAID;;;;;"}