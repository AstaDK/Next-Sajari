import { useSearchContext, useAutocomplete } from '@sajari/react-hooks';
import { pluralize } from '@sajari/react-sdk-utils';
import { Fragment } from 'react';
import { LiveMessage } from 'react-aria-live';
import { useTranslation } from 'react-i18next';
import { jsxs, jsx } from '@emotion/core/jsx-runtime';
import { useSearchUIContext } from '../ContextProvider/index.esm.js';
import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';
import { Text, Box, Button } from '@sajari/react-components';

var Summary = function Summary(props) {
  var _queryValues$get;

  var _useSearchContext = useSearchContext(),
      latency = _useSearchContext.latency,
      totalResults = _useSearchContext.totalResults,
      search = _useSearchContext.search,
      queryValues = _useSearchContext.queryValues,
      searched = _useSearchContext.searched;

  var _useSearchUIContext = useSearchUIContext(),
      disableDefaultStyles = _useSearchUIContext.disableDefaultStyles,
      language = _useSearchUIContext.language;

  var _props$suggest = props.suggest,
      suggest = _props$suggest === void 0 ? false : _props$suggest,
      _props$showLatency = props.showLatency,
      showLatency = _props$showLatency === void 0 ? false : _props$showLatency,
      rest = _objectWithoutPropertiesLoose(props, ["suggest", "showLatency"]);

  var query = (_queryValues$get = queryValues == null ? void 0 : queryValues.get('q')) != null ? _queryValues$get : '';

  var _useAutocomplete = useAutocomplete(),
      completion = _useAutocomplete.completion;

  var _useTranslation = useTranslation(['common', 'summary']),
      t = _useTranslation.t;

  if (!searched) {
    return null;
  }

  return jsxs(Fragment, {
    children: [jsx(LiveMessage, {
      message: query === '' ? t('summary:noQueryResults', {
        count: totalResults,
        object: pluralize(totalResults, t('common:item'), t('common:items'))
      }) : t('summary:results', {
        count: totalResults,
        object: pluralize(totalResults, t('common:result'), t('common:results')),
        query: query
      }),
      "aria-live": "polite"
    }), jsxs(Text, _extends({}, rest, {
      disableDefaultStyles: disableDefaultStyles,
      children: [jsx(Box, {
        as: "span",
        dangerouslySetInnerHTML: {
          __html: query === '' ? t('summary:noQueryResults', {
            count: totalResults.toLocaleString(language),
            object: pluralize(totalResults, t('common:item'), t('common:items')).toLowerCase()
          }) : t('summary:results', {
            count: totalResults.toLocaleString(language),
            object: pluralize(totalResults, t('common:result'), t('common:results')).toLowerCase(),
            query: "<strong>" + query + "</strong>"
          })
        }
      }), showLatency ? " " + t('summary:latency', {
        time: latency
      }) : '', completion && completion !== query.trim() && suggest ? jsxs(Fragment, {
        children: [". " + t('summary:alternative') + " ", jsx(Button, {
          onClick: function onClick() {
            return search(completion);
          },
          spacing: "none",
          appearance: "link",
          disableDefaultStyles: disableDefaultStyles,
          children: completion
        }), "."]
      }) : null]
    }))]
  });
};

export default Summary;
//# sourceMappingURL=index.esm.js.map
