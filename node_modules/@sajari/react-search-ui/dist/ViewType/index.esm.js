import 'react';
import { useTranslation } from 'react-i18next';
import { jsx, jsxs } from '@emotion/core/jsx-runtime';
import { useSearchUIContext } from '../ContextProvider/index.esm.js';
import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';
import { ButtonGroup, Button } from '@sajari/react-components';
import '../assets/icons/small-chevron-down.esm.js';
import '../assets/icons/small-chevron-up.esm.js';
import IconSmallGrid from '../assets/icons/small-grid.esm.js';
import IconSmallList from '../assets/icons/small-list.esm.js';
import { useId } from '@react-aria/utils';
import ViewOption from '../ViewOption/index.esm.js';

var ViewType = function ViewType(props) {
  var _customClassNames$sor, _customClassNames$sor2, _customClassNames$vie;

  var _useTranslation = useTranslation('viewType'),
      t = _useTranslation.t;

  var _useSearchUIContext = useSearchUIContext(),
      customClassNames = _useSearchUIContext.customClassNames,
      _useSearchUIContext$d = _useSearchUIContext.disableDefaultStyles,
      disableDefaultStyles = _useSearchUIContext$d === void 0 ? false : _useSearchUIContext$d;

  var _props$label = props.label,
      label = _props$label === void 0 ? t('label') : _props$label,
      size = props.size,
      rest = _objectWithoutPropertiesLoose(props, ["label", "size", "styles"]);

  var id = "view-type-" + useId();

  var _useSearchUIContext2 = useSearchUIContext(),
      viewType = _useSearchUIContext2.viewType,
      setViewType = _useSearchUIContext2.setViewType;

  return jsx(ViewOption, _extends({
    id: id,
    label: label,
    size: size,
    className: (_customClassNames$sor = customClassNames.sorting) == null ? void 0 : _customClassNames$sor.container,
    labelClassName: (_customClassNames$sor2 = customClassNames.sorting) == null ? void 0 : _customClassNames$sor2.label
  }, rest, {
    children: jsxs(ButtonGroup, {
      attached: true,
      disableDefaultStyles: disableDefaultStyles,
      className: (_customClassNames$vie = customClassNames.viewType) == null ? void 0 : _customClassNames$vie.buttonGroup,
      children: [jsxs(Button, {
        onClick: function onClick() {
          return setViewType('grid');
        },
        size: size,
        appearance: viewType === 'grid' ? 'primary' : undefined,
        "aria-label": t('grid'),
        children: ["\u200B", jsx(IconSmallGrid, {})]
      }), jsxs(Button, {
        onClick: function onClick() {
          return setViewType('list');
        },
        size: size,
        appearance: viewType === 'list' ? 'primary' : undefined,
        "aria-label": t('list'),
        children: ["\u200B", jsx(IconSmallList, {})]
      })]
    })
  }));
};

export default ViewType;
//# sourceMappingURL=index.esm.js.map
