import { Variables, combineFilters, EVENT_RESPONSE_UPDATED } from '@sajari/react-hooks';
import { isEmpty } from '@sajari/react-sdk-utils';

function search(props) {
  var _variables$get$filter;

  if (!props) {
    throw new Error('search function requires a `search` config');
  }

  var pipeline = props.pipeline,
      filters = props.filters,
      _props$variables = props.variables,
      variables = _props$variables === void 0 ? new Variables() : _props$variables;

  var _filter = combineFilters(filters != null ? filters : []);

  var variablesFilterString = (_variables$get$filter = variables.get().filter) != null ? _variables$get$filter : '';
  variables.set({
    filter: function filter() {
      var expression = _filter.filter();

      return [variablesFilterString, isEmpty(expression) ? '_id != ""' : expression].filter(Boolean).join(' AND ');
    },
    countFilters: function countFilters() {
      return _filter.countFilters();
    },
    buckets: function buckets() {
      return _filter.buckets();
    },
    count: function count() {
      return _filter.count();
    }
  });
  return new Promise(function (resolve) {
    var unlisten = pipeline.listen(EVENT_RESPONSE_UPDATED, function (response) {
      var _response$getQueryVal, _response$getResponse, _response$getValues;

      unlisten();

      if (!response || response.isError()) {
        resolve(null);
        return;
      }

      var serialized = JSON.stringify({
        queryValues: Object.fromEntries((_response$getQueryVal = response.getQueryValues()) != null ? _response$getQueryVal : []),
        response: Object.fromEntries((_response$getResponse = response.getResponse()) != null ? _response$getResponse : []),
        values: Object.fromEntries((_response$getValues = response.getValues()) != null ? _response$getValues : [])
      });
      resolve(serialized);
    });
    pipeline.search(variables.get());
  });
}

export default search;
//# sourceMappingURL=index.esm.js.map
