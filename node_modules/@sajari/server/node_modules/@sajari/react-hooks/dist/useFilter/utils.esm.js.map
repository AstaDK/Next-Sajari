{"version":3,"file":"utils.esm.js","sources":["../../src/useFilter/utils.ts"],"sourcesContent":["import { isSSR } from '@sajari/react-sdk-utils';\n\nimport { SortType } from './types';\n\nconst priceRangePattern = /\\d+\\s-\\s\\d+/gm;\nconst patternTest = priceRangePattern.test.bind(priceRangePattern);\nconst collator = new Intl.Collator(!isSSR() ? window.navigator.language : 'en-US', {\n  numeric: true,\n});\n\nexport type Item = [string, number | string | (() => string)];\n\n// Add support to sort price range (\"1 - 50\", \"200 - 500\" or \"> 2000\")\nexport const sortItems = (list: Item[], sort: SortType = 'alpha', asc = true) => {\n  if (sort === 'none') {\n    return list;\n  }\n\n  const byLabel = sort !== 'count';\n\n  return [...list].sort(([labelLeft, valueLeft], [labelRight, valueRight]) => {\n    const left = String(byLabel ? labelLeft : valueLeft);\n    const right = String(byLabel ? labelRight : valueRight);\n    // for price range\n    switch (true) {\n      case [left, right].every(patternTest): {\n        const minLeft = left.split(' - ').map(Number)[0];\n        const minRight = right.split(' - ').map(Number)[0];\n        if (asc) {\n          return collator.compare(String(minLeft), String(minRight));\n        }\n        return collator.compare(String(minRight), String(minLeft));\n      }\n      case left.startsWith('>'):\n      case right.startsWith('<'):\n        return asc ? 1 : -1;\n      case left.startsWith('<'):\n      case right.startsWith('>'):\n        return asc ? -1 : 1;\n      default:\n        break;\n    }\n\n    if (asc) {\n      return collator.compare(String(left), String(right));\n    }\n    return collator.compare(String(right), String(left));\n  });\n};\n"],"names":["priceRangePattern","patternTest","test","bind","collator","Intl","Collator","isSSR","window","navigator","language","numeric","sortItems","list","sort","asc","byLabel","labelLeft","valueLeft","labelRight","valueRight","left","String","right","every","minLeft","split","map","Number","minRight","compare","startsWith"],"mappings":";;AAIA,IAAMA,iBAAiB,GAAG,eAA1B;AACA,IAAMC,WAAW,gBAAGD,iBAAiB,CAACE,IAAlB,CAAuBC,IAAvB,CAA4BH,iBAA5B,CAApB;AACA,IAAMI,QAAQ,gBAAG,IAAIC,IAAI,CAACC,QAAT,CAAkB,eAACC,KAAK,EAAN,GAAWC,MAAM,CAACC,SAAP,CAAiBC,QAA5B,GAAuC,OAAzD,EAAkE;AACjFC,EAAAA,OAAO,EAAE;AADwE,CAAlE,CAAjB;IAOaC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAeC,IAAf,EAAyCC,GAAzC;MAAeD;AAAAA,IAAAA,OAAiB;;;MAASC;AAAAA,IAAAA,MAAM;;;AACtE,MAAID,IAAI,KAAK,MAAb,EAAqB;AACnB,WAAOD,IAAP;AACD;;AAED,MAAMG,OAAO,GAAGF,IAAI,KAAK,OAAzB;AAEA,SAAO,UAAID,IAAJ,EAAUC,IAAV,CAAe;QAAEG;QAAWC;QAAaC;QAAYC;AAC1D,QAAMC,IAAI,GAAGC,MAAM,CAACN,OAAO,GAAGC,SAAH,GAAeC,SAAvB,CAAnB;AACA,QAAMK,KAAK,GAAGD,MAAM,CAACN,OAAO,GAAGG,UAAH,GAAgBC,UAAxB,CAApB;;AAEA,YAAQ,IAAR;AACE,WAAK,CAACC,IAAD,EAAOE,KAAP,EAAcC,KAAd,CAAoBvB,WAApB,CAAL;AAAuC;AACrC,cAAMwB,OAAO,GAAGJ,IAAI,CAACK,KAAL,CAAW,KAAX,EAAkBC,GAAlB,CAAsBC,MAAtB,EAA8B,CAA9B,CAAhB;AACA,cAAMC,QAAQ,GAAGN,KAAK,CAACG,KAAN,CAAY,KAAZ,EAAmBC,GAAnB,CAAuBC,MAAvB,EAA+B,CAA/B,CAAjB;;AACA,cAAIb,GAAJ,EAAS;AACP,mBAAOX,QAAQ,CAAC0B,OAAT,CAAiBR,MAAM,CAACG,OAAD,CAAvB,EAAkCH,MAAM,CAACO,QAAD,CAAxC,CAAP;AACD;;AACD,iBAAOzB,QAAQ,CAAC0B,OAAT,CAAiBR,MAAM,CAACO,QAAD,CAAvB,EAAmCP,MAAM,CAACG,OAAD,CAAzC,CAAP;AACD;;AACD,WAAKJ,IAAI,CAACU,UAAL,CAAgB,GAAhB,CAAL;AACA,WAAKR,KAAK,CAACQ,UAAN,CAAiB,GAAjB,CAAL;AACE,eAAOhB,GAAG,GAAG,CAAH,GAAO,CAAC,CAAlB;;AACF,WAAKM,IAAI,CAACU,UAAL,CAAgB,GAAhB,CAAL;AACA,WAAKR,KAAK,CAACQ,UAAN,CAAiB,GAAjB,CAAL;AACE,eAAOhB,GAAG,GAAG,CAAC,CAAJ,GAAQ,CAAlB;AAdJ;;AAmBA,QAAIA,GAAJ,EAAS;AACP,aAAOX,QAAQ,CAAC0B,OAAT,CAAiBR,MAAM,CAACD,IAAD,CAAvB,EAA+BC,MAAM,CAACC,KAAD,CAArC,CAAP;AACD;;AACD,WAAOnB,QAAQ,CAAC0B,OAAT,CAAiBR,MAAM,CAACC,KAAD,CAAvB,EAAgCD,MAAM,CAACD,IAAD,CAAtC,CAAP;AACD,GA3BM,CAAP;AA4BD;;;;"}