{"version":3,"file":"FilterBuilder.esm.js","sources":["../../../../src/ContextProvider/controllers/filters/FilterBuilder.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport { isEmpty, isFunction, isString, replaceAll } from '@sajari/react-sdk-utils';\n\nimport { EVENT_OPTIONS_UPDATED, EVENT_SELECTION_UPDATED } from '../../events';\nimport { Listener } from '../Listener';\nimport { FilterOptions, JoinOperator, Options } from './types';\n\n// Escape any characters that will break the request\nconst escapeValue = (input = '') => {\n  let escaped = input;\n  const chars = [','];\n\n  chars.forEach((c) => {\n    escaped = replaceAll(input, c, `\\\\${c}`);\n  });\n\n  return escaped;\n};\n\nconst events = [EVENT_SELECTION_UPDATED, EVENT_OPTIONS_UPDATED];\n\n/**\n * Filter is a helper class for building filters from UI components.\n */\nexport default class FilterBuilder {\n  private current: string[];\n\n  private initial: string[];\n\n  private name: string;\n\n  private group: string | undefined;\n\n  private field: string | undefined;\n\n  private options: Options;\n\n  private multi: boolean;\n\n  private count: boolean;\n\n  private array: boolean;\n\n  private joinOperator: JoinOperator;\n\n  private listeners: { [k: string]: Listener };\n\n  /**\n   * Constructs an instance of Filter.\n   *\n   * @example\n   * const filter = new FilterBuilder({});\n   */\n  constructor({\n    initial = [],\n    joinOperator = 'OR',\n    multi = true,\n    options = {},\n    array = false,\n    name,\n    field,\n    group,\n    count = isEmpty(options),\n  }: FilterOptions) {\n    if (isString(initial)) {\n      initial = [initial];\n    }\n\n    /** @private */\n    this.current = initial;\n    /** @private */\n    this.initial = initial;\n    /** @private */\n    this.name = name;\n    /** @private */\n    this.group = group;\n    /** @private */\n    this.field = field;\n    /** @private */\n    this.count = count;\n    /** @private */\n    this.options = options;\n    /** @private */\n    this.multi = multi;\n    /** @private */\n    this.array = array;\n    /** @private */\n    this.joinOperator = joinOperator;\n    /** @private */\n    this.listeners = {\n      [EVENT_SELECTION_UPDATED]: new Listener(),\n      [EVENT_OPTIONS_UPDATED]: new Listener(),\n    };\n  }\n\n  /**\n   * Register a listener for a specific event.\n   */\n  public listen(event: string, callback: (filter: FilterBuilder) => void): () => void {\n    if (!events.includes(event)) {\n      throw new Error(`Unknown event type \"${event}\"`);\n    }\n    return this.listeners[event].listen(callback);\n  }\n\n  /**\n   * Set the state of the filter.\n   */\n  public set(values: string[], merge = false) {\n    if (merge) {\n      const nonDuplicate = values.filter((v) => !this.current.includes(v));\n      this.current = [...this.current, ...nonDuplicate];\n    } else {\n      this.current = values;\n    }\n\n    this.emitSelectionUpdated();\n  }\n\n  /**\n   * Remove a list of values from the current state\n   */\n  public remove(values: string[]) {\n    this.current = this.current.filter((v) => !values.includes(v));\n    this.emitSelectionUpdated();\n  }\n\n  /**\n   * returns whether the filter is set or not.\n   */\n  public isSet(name: string): boolean {\n    return this.current.includes(name);\n  }\n\n  /**\n   * Set or merge filter options.\n   */\n  public setOptions(options: Options, merge = false) {\n    if (merge) {\n      this.options = { ...this.options, ...options };\n    } else {\n      this.options = options;\n    }\n\n    this.emitOptionsUpdated();\n  }\n\n  public getName() {\n    return this.name;\n  }\n\n  public getGroup() {\n    return this.group;\n  }\n\n  public getField() {\n    return this.field;\n  }\n\n  public getCount() {\n    return this.count;\n  }\n\n  public getOptions() {\n    return this.options;\n  }\n\n  public get() {\n    return this.current;\n  }\n\n  public isArray() {\n    return this.array;\n  }\n\n  public isMulti() {\n    return this.multi;\n  }\n\n  /**\n   * Builds up the filter string from the current filter and it's children.\n   */\n  public filter() {\n    const options = this.current\n      .map((c) => {\n        let f = this.options[c];\n        if (isFunction(f)) {\n          f = f();\n        }\n        if (!isEmpty(f)) {\n          f = escapeValue(f);\n        }\n        if (this.count && f === undefined && c) {\n          f = this.array ? `${this.field} ~ [\"${c}\"]` : `${this.field} = \"${c}\"`;\n        }\n        return f;\n      })\n      .filter(Boolean);\n\n    if (options.length < 2) {\n      return options.join('');\n    }\n\n    return options.map((f) => `(${f})`).join(` ${this.joinOperator} `);\n  }\n\n  public getBuckets() {\n    return Object.entries(this.options)\n      .map(([key, value]) => `${this.name}_${key}:${value}`)\n      .join(',');\n  }\n\n  /**\n   * Reset the current filter to the initial one\n   */\n  public reset() {\n    this.current = [...this.initial];\n    this.emitSelectionUpdated();\n  }\n\n  /**\n   * Emits a selection updated event to the selection updated listener.\n   * @private\n   */\n  protected emitSelectionUpdated() {\n    this.listeners[EVENT_SELECTION_UPDATED].notify((listener) => {\n      listener();\n    });\n  }\n\n  /**\n   * Emits an options updated event to the options updated listener.\n   * @private\n   */\n  protected emitOptionsUpdated() {\n    this.listeners[EVENT_OPTIONS_UPDATED].notify((listener) => {\n      listener();\n    });\n  }\n}\n"],"names":["escapeValue","input","escaped","chars","forEach","c","replaceAll","events","EVENT_SELECTION_UPDATED","EVENT_OPTIONS_UPDATED","FilterBuilder","initial","joinOperator","multi","options","array","name","field","group","count","isEmpty","isString","current","listeners","Listener","listen","event","callback","includes","Error","set","values","merge","nonDuplicate","filter","v","emitSelectionUpdated","remove","isSet","setOptions","emitOptionsUpdated","getName","getGroup","getField","getCount","getOptions","get","isArray","isMulti","map","f","isFunction","undefined","Boolean","length","join","getBuckets","Object","entries","key","value","reset","notify","listener"],"mappings":"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"}