{"version":3,"file":"utils.esm.js","sources":["../../../../src/ContextProvider/controllers/filters/utils.ts"],"sourcesContent":["import { groupBy, isEmpty } from '@sajari/react-sdk-utils';\n\nimport FilterBuilder from './FilterBuilder';\nimport RangeFilterBuilder from './RangeFilterBuilder';\n\ntype Type = 'filter' | 'countFilters';\n\n// Group expressions into an ARRAY_MATCH\nconst buildArrayMatch = (expressions: Array<string>) => {\n  let list = expressions.filter(Boolean);\n\n  if (list.length > 1) {\n    list = list.map((expression) => `(${expression})`);\n  }\n\n  return `ARRAY_MATCH(${list.join(' AND ')})`;\n};\n\n// Group filters together using ARRAY_MATCH\nexport function groupFilters(\n  filters: Array<FilterBuilder | RangeFilterBuilder>,\n  type: Type,\n  joinOperator: string,\n): string {\n  let list = filters.map((f) => ({\n    group: f.getGroup(),\n    field: f.getField(),\n    expression: f.filter(),\n    count: f instanceof FilterBuilder && f.getCount(),\n  }));\n\n  // For filter we only want defined expressions\n  if (type === 'filter') {\n    list = list.filter(({ expression }) => Boolean(expression));\n  }\n\n  // Group and flatten the filter expressions into groups\n  const groups = Object.entries(groupBy(list, 'group'))\n    .filter(([group]) => Boolean(group))\n    .reduce(\n      (out, [key, f]: [string, typeof list]) => ({\n        ...out,\n        [key]: f.map(({ expression }) => expression),\n      }),\n      {},\n    ) as Record<string, Array<string>>;\n\n  // Build filter expression\n  if (type === 'filter') {\n    // Build the list of non grouped filters\n    const basicFilters = list.filter(({ group, count }) => !group && !count).map(({ expression }) => `(${expression})`);\n\n    return Object.entries(groups)\n      .reduce((out, [group, expressions]) => {\n        if (group !== 'undefined' && !isEmpty(expressions)) {\n          return [...out, buildArrayMatch(expressions)];\n        }\n\n        return out;\n      }, [])\n      .concat(...basicFilters)\n      .join(joinOperator);\n  }\n\n  // Build countFilters expression (has to be one item per filter)\n  return list\n    .filter(({ field, count }) => !isEmpty(field) && count)\n    .map(({ group, expression, count }) => {\n      if (group && !isEmpty(groups[group])) {\n        return buildArrayMatch(groups[group]);\n      }\n\n      return count ? expression : null;\n    })\n    .filter((e) => e !== null)\n    .join(joinOperator);\n}\n"],"names":["buildArrayMatch","expressions","list","filter","Boolean","length","map","expression","join","groupFilters","filters","type","joinOperator","f","group","getGroup","field","getField","count","FilterBuilder","getCount","groups","Object","entries","groupBy","reduce","out","key","basicFilters","isEmpty","concat","e"],"mappings":"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"}