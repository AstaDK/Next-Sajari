{"version":3,"file":"Variables.esm.js","sources":["../../../src/ContextProvider/controllers/Variables.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { defaultConfig } from '../Config';\nimport { EVENT_VALUES_UPDATED } from '../events';\nimport { Listener, ListenerMap } from './Listener';\n\nexport type VariableFn = () => string;\nexport type VariablesMap = Map<string, string | string[] | number | boolean | VariableFn>;\nexport interface VariablesObject {\n  [k: string]: string | string[] | number | boolean | VariableFn | undefined;\n}\nexport type CallbackFn = (variables: VariablesObject, set: (variables: VariablesObject) => void) => void;\n\nexport class Variables {\n  private variables: VariablesMap;\n\n  private listeners: ListenerMap;\n\n  /**\n   * Constructor for Variables object.\n   * @param variables Initial variables.\n   */\n  constructor(variables: { [k: string]: string | string[] | number | boolean | VariableFn } = {}) {\n    this.listeners = new Map([[EVENT_VALUES_UPDATED, new Listener()]]);\n    this.variables = new Map(\n      Object.entries({\n        [defaultConfig.qParam]: '',\n        [defaultConfig.resultsPerPageParam]: 15,\n        ...variables,\n      }),\n    );\n  }\n\n  /**\n   * Register a listener for a specific event.\n   * @param event Event to listen for\n   * @param callback Callback to run when the event happens.\n   */\n  public listen(event: string, callback: CallbackFn) {\n    if (event !== EVENT_VALUES_UPDATED) {\n      throw new Error(`Unknown event type \"${event}\"`);\n    }\n    return (this.listeners.get(event) as Listener).listen(callback);\n  }\n\n  /**\n   * Merge variables into the variable map.\n   *\n   * Set a variable to undefined to remove it.\n   */\n  public set(variables: VariablesObject) {\n    this._set(variables);\n    this._emitUpdated(variables);\n  }\n\n  /**\n   * get returns the current variables.\n   */\n  public get(): { [k: string]: string } {\n    const variables = {} as { [k: string]: string };\n\n    this.variables.forEach((variable, key) => {\n      if (typeof variable === 'function') {\n        variables[key] = variable();\n      } else if (Array.isArray(variable)) {\n        variables[key] = variable.join(',');\n      } else {\n        variables[key] = String(variable);\n      }\n    });\n    return variables;\n  }\n\n  /**\n   * Emits an event to notify listener that the variables have been updated.\n   *\n   * @private\n   */\n  private _emitUpdated(changes: VariablesObject) {\n    (this.listeners.get(EVENT_VALUES_UPDATED) as Listener).notify((listener) =>\n      listener(changes, (variables: VariablesObject) => this._set(variables)),\n    );\n  }\n\n  /**\n   * Sets variables without triggering an event, internal use only.\n   */\n  private _set(variables: VariablesObject) {\n    Object.keys(variables).forEach((key) => {\n      if (variables[key] === undefined) {\n        this.variables.delete(key);\n      } else {\n        this.variables.set(key, variables[key] as string | VariableFn);\n      }\n    });\n  }\n}\n"],"names":["Variables","variables","listeners","Map","EVENT_VALUES_UPDATED","Listener","Object","entries","defaultConfig","qParam","resultsPerPageParam","listen","event","callback","Error","get","set","_set","_emitUpdated","forEach","variable","key","Array","isArray","join","String","changes","notify","listener","keys","undefined"],"mappings":";;;;;IAYaA,SAAb;AASE,qBAAYC,SAAZ;;;QAAYA;AAAAA,MAAAA,YAAgF;;;AAC1F,SAAKC,SAAL,GAAiB,IAAIC,GAAJ,CAAQ,CAAC,CAACC,oBAAD,EAAuB,IAAIC,QAAJ,EAAvB,CAAD,CAAR,CAAjB;AACA,SAAKJ,SAAL,GAAiB,IAAIE,GAAJ,CACfG,MAAM,CAACC,OAAP,qCACGC,aAAa,CAACC,MADjB,IAC0B,EAD1B,YAEGD,aAAa,CAACE,mBAFjB,IAEuC,EAFvC,cAGKT,SAHL,EADe,CAAjB;AAOD;;AAlBH;;AAAA,SAyBSU,MAzBT,GAyBS,gBAAOC,KAAP,EAAsBC,QAAtB;AACL,QAAID,KAAK,KAAKR,oBAAd,EAAoC;AAClC,YAAM,IAAIU,KAAJ,2BAAiCF,KAAjC,QAAN;AACD;;AACD,WAAQ,KAAKV,SAAL,CAAea,GAAf,CAAmBH,KAAnB,EAAuCD,MAAvC,CAA8CE,QAA9C,CAAR;AACD,GA9BH;;AAAA,SAqCSG,GArCT,GAqCS,aAAIf,SAAJ;AACL,SAAKgB,IAAL,CAAUhB,SAAV;;AACA,SAAKiB,YAAL,CAAkBjB,SAAlB;AACD,GAxCH;;AAAA,SA6CSc,GA7CT,GA6CS;AACL,QAAMd,SAAS,GAAG,EAAlB;AAEA,SAAKA,SAAL,CAAekB,OAAf,CAAuB,UAACC,QAAD,EAAWC,GAAX;AACrB,UAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClCnB,QAAAA,SAAS,CAACoB,GAAD,CAAT,GAAiBD,QAAQ,EAAzB;AACD,OAFD,MAEO,IAAIE,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAClCnB,QAAAA,SAAS,CAACoB,GAAD,CAAT,GAAiBD,QAAQ,CAACI,IAAT,CAAc,GAAd,CAAjB;AACD,OAFM,MAEA;AACLvB,QAAAA,SAAS,CAACoB,GAAD,CAAT,GAAiBI,MAAM,CAACL,QAAD,CAAvB;AACD;AACF,KARD;AASA,WAAOnB,SAAP;AACD,GA1DH;;AAAA,SAiEUiB,YAjEV,GAiEU,sBAAaQ,OAAb;;;AACL,SAAKxB,SAAL,CAAea,GAAf,CAAmBX,oBAAnB,EAAsDuB,MAAtD,CAA6D,UAACC,QAAD;AAAA,aAC5DA,QAAQ,CAACF,OAAD,EAAU,UAACzB,SAAD;AAAA,eAAgC,KAAI,CAACgB,IAAL,CAAUhB,SAAV,CAAhC;AAAA,OAAV,CADoD;AAAA,KAA7D;AAGF,GArEH;;AAAA,SA0EUgB,IA1EV,GA0EU,cAAKhB,SAAL;;;AACNK,IAAAA,MAAM,CAACuB,IAAP,CAAY5B,SAAZ,EAAuBkB,OAAvB,CAA+B,UAACE,GAAD;AAC7B,UAAIpB,SAAS,CAACoB,GAAD,CAAT,KAAmBS,SAAvB,EAAkC;AAChC,QAAA,MAAI,CAAC7B,SAAL,WAAsBoB,GAAtB;AACD,OAFD,MAEO;AACL,QAAA,MAAI,CAACpB,SAAL,CAAee,GAAf,CAAmBK,GAAnB,EAAwBpB,SAAS,CAACoB,GAAD,CAAjC;AACD;AACF,KAND;AAOD,GAlFH;;AAAA;AAAA;;;;"}