{"version":3,"file":"Pipeline.esm.js","sources":["../../../src/ContextProvider/controllers/Pipeline.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { isSSR, isString } from '@sajari/react-sdk-utils';\nimport { Client } from '@sajari/sdk-js';\n\nimport { EVENT_RESPONSE_UPDATED, EVENT_RESULT_CLICKED, EVENT_SEARCH_SENT } from '../events';\nimport { Analytics, GoogleAnalytics } from './analytics';\nimport { CallbackFn, Listener, ListenerMap, UnlistenFn } from './Listener';\nimport { Response } from './Response';\nimport { ClickTracking, NoTracking, PosNegTracking } from './tracking';\n\nconst events = [EVENT_SEARCH_SENT, EVENT_RESPONSE_UPDATED, EVENT_RESULT_CLICKED];\n\ntype QueryPipeline = ReturnType<Client['pipeline']>;\n\nexport class Pipeline {\n  public config: {\n    account: string;\n    collection: string;\n    endpoint?: string;\n    key?: string;\n    secret?: string;\n  };\n\n  private pipeline: QueryPipeline;\n\n  private client: Client;\n\n  private tracking: ClickTracking | PosNegTracking | NoTracking;\n\n  private listeners: ListenerMap;\n\n  private searchCount: number;\n\n  private response: Response = new Response(null);\n\n  private analytics: Analytics;\n\n  /**\n   * Constructs a Pipeline object.\n   * @param config Account, Collection config\n   * @param name Name of the pipeline.\n   * @param tracking Default tracking to use in searches.\n   * @param analyticsAdapters\n   */\n  constructor(\n    config: {\n      account: string;\n      collection: string;\n      endpoint?: string;\n      key?: string;\n      secret?: string;\n    },\n    name: string | { name: string; version?: string },\n    tracking: ClickTracking | PosNegTracking | NoTracking = new NoTracking(),\n    analyticsAdapters = [GoogleAnalytics],\n  ) {\n    const { account, collection, endpoint, key, secret } = config;\n    this.config = config;\n\n    const p: { name?: string; version?: string } = {\n      name: undefined,\n      version: undefined,\n    };\n    if (isString(name)) {\n      p.name = name;\n    } else if ('name' in name) {\n      p.name = name.name;\n      p.version = name.version;\n    }\n\n    // Only use key/secret in SSR contexts\n    if (isSSR()) {\n      this.client = new Client(account, collection, endpoint, key, secret);\n    } else {\n      this.client = new Client(account, collection, endpoint);\n    }\n\n    this.pipeline = this.client.pipeline(p.name as string, p.version);\n    this.tracking = tracking;\n    this.listeners = new Map([\n      [EVENT_SEARCH_SENT, new Listener()],\n      [EVENT_RESPONSE_UPDATED, new Listener()],\n      [EVENT_RESULT_CLICKED, new Listener()],\n    ]);\n    this.searchCount = 0;\n    this.response = new Response(null);\n\n    this.analytics = new Analytics(this, this.tracking);\n    analyticsAdapters.forEach((Adapter) => {\n      // eslint-disable-next-line no-new\n      new Adapter(this.analytics);\n    });\n  }\n\n  /**\n   * Register a listener for a specific event.\n   * @param event Event to listen for\n   * @param callback Callback to run when the event happens.\n   * @return The unregister function to remove the callback from the listener.\n   */\n  public listen(event: string, callback: CallbackFn): UnlistenFn {\n    if (events.indexOf(event) === -1) {\n      throw new Error(`Unknown event type \"${event}\"`);\n    }\n    return (this.listeners.get(event) as Listener).listen(callback);\n  }\n\n  /**\n   * Emits a search event to the search event listener.\n   * @private\n   */\n  public _emitSearchSent(variables: { [k: string]: string }): void {\n    (this.listeners.get(EVENT_SEARCH_SENT) as Listener).notify((listener) => {\n      listener(variables);\n    });\n  }\n\n  /**\n   * Emits a results event to the results event listener.\n   * @private\n   */\n  public _emitResponseUpdated(response: Response): void {\n    (this.listeners.get(EVENT_RESPONSE_UPDATED) as Listener).notify((listener) => {\n      listener(response);\n    });\n  }\n\n  /**\n   * Emits a result clicked event to the results clicked event listeners.\n   * @param value Value to send to the listeners.\n   */\n  public emitResultClicked(value: string): void {\n    (this.listeners.get(EVENT_RESULT_CLICKED) as Listener).notify((listener) => {\n      listener(value);\n    });\n  }\n\n  /**\n   * Perform a search.\n   * @param variables Key-value parameters to pass to the pipeline.\n   */\n  public search(variables: { [k: string]: string }): void {\n    this.searchCount += 1;\n    const currentSearch = this.searchCount;\n\n    this.pipeline\n      .search(variables, this.tracking.next(variables))\n      .then(([response, responseValues]) => {\n        if (currentSearch < this.searchCount) {\n          return;\n        }\n\n        this.response = new Response(\n          null,\n          new Map(Object.entries(variables)),\n          new Map(Object.entries(response)),\n          new Map(Object.entries(responseValues)),\n        );\n      })\n      .catch((error) => {\n        // TODO: Should we have a debug option to enable console logging?\n        // eslint-disable-next-line no-console\n        console.error(error);\n\n        if (currentSearch < this.searchCount) {\n          return;\n        }\n\n        this.response = new Response(error, new Map(Object.entries(variables)), undefined, undefined);\n      })\n      .finally(() => {\n        this._emitResponseUpdated(this.response);\n      });\n    this._emitSearchSent(variables);\n  }\n\n  /**\n   * Clears the error, response, and response variables from this object.\n   * @param variables Key-value pair parameters.\n   */\n  public clearResponse(variables: { [k: string]: string }): void {\n    this.tracking.next(variables);\n    this.searchCount += 1;\n    this.response = new Response(null);\n    this._emitResponseUpdated(this.response);\n  }\n\n  /**\n   * The current response.\n   */\n  public getResponse(): Response {\n    return this.response;\n  }\n\n  /**\n   * The analytics adaptor connected to this pipeline.\n   */\n  public getAnalytics(): Analytics {\n    return this.analytics;\n  }\n\n  /**\n   * The underlying client\n   */\n  public getClient(): Client {\n    return this.client;\n  }\n\n  /**\n   * The tracking instance\n   */\n  public getTracking(): ClickTracking | PosNegTracking | NoTracking {\n    return this.tracking;\n  }\n}\n"],"names":["events","EVENT_SEARCH_SENT","EVENT_RESPONSE_UPDATED","EVENT_RESULT_CLICKED","Pipeline","config","name","tracking","analyticsAdapters","NoTracking","GoogleAnalytics","Response","account","collection","endpoint","key","secret","p","undefined","version","isString","isSSR","client","Client","pipeline","listeners","Map","Listener","searchCount","response","analytics","Analytics","forEach","Adapter","listen","event","callback","indexOf","Error","get","_emitSearchSent","variables","notify","listener","_emitResponseUpdated","emitResultClicked","value","search","currentSearch","next","then","responseValues","Object","entries","error","console","clearResponse","getResponse","getAnalytics","getClient","getTracking"],"mappings":";;;;;;;;;;;;AAUA,IAAMA,MAAM,GAAG,CAACC,iBAAD,EAAoBC,sBAApB,EAA4CC,oBAA5C,CAAf;IAIaC,QAAb;AA8BE,oBACEC,MADF,EAQEC,IARF,EASEC,QATF,EAUEC,iBAVF;;;QASED;AAAAA,MAAAA,WAAwD,IAAIE,UAAJ;;;QACxDD;AAAAA,MAAAA,oBAAoB,CAACE,eAAD;;;AArBd,iBAAA,GAAqB,IAAIC,QAAJ,CAAa,IAAb,CAArB;QAuBEC,UAA+CP,OAA/CO;QAASC,aAAsCR,OAAtCQ;QAAYC,WAA0BT,OAA1BS;QAAUC,MAAgBV,OAAhBU;QAAKC,SAAWX,OAAXW;AAC5C,SAAKX,MAAL,GAAcA,MAAd;AAEA,QAAMY,CAAC,GAAwC;AAC7CX,MAAAA,IAAI,EAAEY,SADuC;AAE7CC,MAAAA,OAAO,EAAED;AAFoC,KAA/C;;AAIA,QAAIE,QAAQ,CAACd,IAAD,CAAZ,EAAoB;AAClBW,MAAAA,CAAC,CAACX,IAAF,GAASA,IAAT;AACD,KAFD,MAEO,IAAI,UAAUA,IAAd,EAAoB;AACzBW,MAAAA,CAAC,CAACX,IAAF,GAASA,IAAI,CAACA,IAAd;AACAW,MAAAA,CAAC,CAACE,OAAF,GAAYb,IAAI,CAACa,OAAjB;AACD;;AAGD,QAAIE,KAAK,EAAT,EAAa;AACX,WAAKC,MAAL,GAAc,IAAIC,MAAJ,CAAWX,OAAX,EAAoBC,UAApB,EAAgCC,QAAhC,EAA0CC,GAA1C,EAA+CC,MAA/C,CAAd;AACD,KAFD,MAEO;AACL,WAAKM,MAAL,GAAc,IAAIC,MAAJ,CAAWX,OAAX,EAAoBC,UAApB,EAAgCC,QAAhC,CAAd;AACD;;AAED,SAAKU,QAAL,GAAgB,KAAKF,MAAL,CAAYE,QAAZ,CAAqBP,CAAC,CAACX,IAAvB,EAAuCW,CAAC,CAACE,OAAzC,CAAhB;AACA,SAAKZ,QAAL,GAAgBA,QAAhB;AACA,SAAKkB,SAAL,GAAiB,IAAIC,GAAJ,CAAQ,CACvB,CAACzB,iBAAD,EAAoB,IAAI0B,QAAJ,EAApB,CADuB,EAEvB,CAACzB,sBAAD,EAAyB,IAAIyB,QAAJ,EAAzB,CAFuB,EAGvB,CAACxB,oBAAD,EAAuB,IAAIwB,QAAJ,EAAvB,CAHuB,CAAR,CAAjB;AAKA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,QAAL,GAAgB,IAAIlB,QAAJ,CAAa,IAAb,CAAhB;AAEA,SAAKmB,SAAL,GAAiB,IAAIC,SAAJ,CAAc,IAAd,EAAoB,KAAKxB,QAAzB,CAAjB;AACAC,IAAAA,iBAAiB,CAACwB,OAAlB,CAA0B,UAACC,OAAD;AAExB,UAAIA,OAAJ,CAAY,KAAI,CAACH,SAAjB;AACD,KAHD;AAID;;AA9EH;;AAAA,SAsFSI,MAtFT,GAsFS,gBAAOC,KAAP,EAAsBC,QAAtB;AACL,QAAIpC,MAAM,CAACqC,OAAP,CAAeF,KAAf,MAA0B,CAAC,CAA/B,EAAkC;AAChC,YAAM,IAAIG,KAAJ,2BAAiCH,KAAjC,QAAN;AACD;;AACD,WAAQ,KAAKV,SAAL,CAAec,GAAf,CAAmBJ,KAAnB,EAAuCD,MAAvC,CAA8CE,QAA9C,CAAR;AACD,GA3FH;;AAAA,SAiGSI,eAjGT,GAiGS,yBAAgBC,SAAhB;AACJ,SAAKhB,SAAL,CAAec,GAAf,CAAmBtC,iBAAnB,EAAmDyC,MAAnD,CAA0D,UAACC,QAAD;AACzDA,MAAAA,QAAQ,CAACF,SAAD,CAAR;AACD,KAFA;AAGF,GArGH;;AAAA,SA2GSG,oBA3GT,GA2GS,8BAAqBf,QAArB;AACJ,SAAKJ,SAAL,CAAec,GAAf,CAAmBrC,sBAAnB,EAAwDwC,MAAxD,CAA+D,UAACC,QAAD;AAC9DA,MAAAA,QAAQ,CAACd,QAAD,CAAR;AACD,KAFA;AAGF,GA/GH;;AAAA,SAqHSgB,iBArHT,GAqHS,2BAAkBC,KAAlB;AACJ,SAAKrB,SAAL,CAAec,GAAf,CAAmBpC,oBAAnB,EAAsDuC,MAAtD,CAA6D,UAACC,QAAD;AAC5DA,MAAAA,QAAQ,CAACG,KAAD,CAAR;AACD,KAFA;AAGF,GAzHH;;AAAA,SA+HSC,MA/HT,GA+HS,gBAAON,SAAP;;;AACL,SAAKb,WAAL,IAAoB,CAApB;AACA,QAAMoB,aAAa,GAAG,KAAKpB,WAA3B;AAEA,SAAKJ,QAAL,CACGuB,MADH,CACUN,SADV,EACqB,KAAKlC,QAAL,CAAc0C,IAAd,CAAmBR,SAAnB,CADrB,EAEGS,IAFH,CAEQ;UAAErB;UAAUsB;;AAChB,UAAIH,aAAa,GAAG,MAAI,CAACpB,WAAzB,EAAsC;AACpC;AACD;;AAED,MAAA,MAAI,CAACC,QAAL,GAAgB,IAAIlB,QAAJ,CACd,IADc,EAEd,IAAIe,GAAJ,CAAQ0B,MAAM,CAACC,OAAP,CAAeZ,SAAf,CAAR,CAFc,EAGd,IAAIf,GAAJ,CAAQ0B,MAAM,CAACC,OAAP,CAAexB,QAAf,CAAR,CAHc,EAId,IAAIH,GAAJ,CAAQ0B,MAAM,CAACC,OAAP,CAAeF,cAAf,CAAR,CAJc,CAAhB;AAMD,KAbH,WAcS,UAACG,KAAD;AAGLC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;;AAEA,UAAIN,aAAa,GAAG,MAAI,CAACpB,WAAzB,EAAsC;AACpC;AACD;;AAED,MAAA,MAAI,CAACC,QAAL,GAAgB,IAAIlB,QAAJ,CAAa2C,KAAb,EAAoB,IAAI5B,GAAJ,CAAQ0B,MAAM,CAACC,OAAP,CAAeZ,SAAf,CAAR,CAApB,EAAwDvB,SAAxD,EAAmEA,SAAnE,CAAhB;AACD,KAxBH,aAyBW;AACP,MAAA,MAAI,CAAC0B,oBAAL,CAA0B,MAAI,CAACf,QAA/B;AACD,KA3BH;;AA4BA,SAAKW,eAAL,CAAqBC,SAArB;AACD,GAhKH;;AAAA,SAsKSe,aAtKT,GAsKS,uBAAcf,SAAd;AACL,SAAKlC,QAAL,CAAc0C,IAAd,CAAmBR,SAAnB;AACA,SAAKb,WAAL,IAAoB,CAApB;AACA,SAAKC,QAAL,GAAgB,IAAIlB,QAAJ,CAAa,IAAb,CAAhB;;AACA,SAAKiC,oBAAL,CAA0B,KAAKf,QAA/B;AACD,GA3KH;;AAAA,SAgLS4B,WAhLT,GAgLS;AACL,WAAO,KAAK5B,QAAZ;AACD,GAlLH;;AAAA,SAuLS6B,YAvLT,GAuLS;AACL,WAAO,KAAK5B,SAAZ;AACD,GAzLH;;AAAA,SA8LS6B,SA9LT,GA8LS;AACL,WAAO,KAAKrC,MAAZ;AACD,GAhMH;;AAAA,SAqMSsC,WArMT,GAqMS;AACL,WAAO,KAAKrD,QAAZ;AACD,GAvMH;;AAAA;AAAA;;;;"}