import { extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { groupBy, isEmpty } from '@sajari/react-sdk-utils';
import FilterBuilder from './FilterBuilder.esm.js';

var buildArrayMatch = function buildArrayMatch(expressions) {
  var list = expressions.filter(Boolean);

  if (list.length > 1) {
    list = list.map(function (expression) {
      return "(" + expression + ")";
    });
  }

  return "ARRAY_MATCH(" + list.join(' AND ') + ")";
};

function groupFilters(filters, type, joinOperator) {
  var list = filters.map(function (f) {
    return {
      group: f.getGroup(),
      field: f.getField(),
      expression: f.filter(),
      count: f instanceof FilterBuilder && f.getCount()
    };
  });

  if (type === 'filter') {
    list = list.filter(function (_ref) {
      var expression = _ref.expression;
      return Boolean(expression);
    });
  }

  var groups = Object.entries(groupBy(list, 'group')).filter(function (_ref2) {
    var group = _ref2[0];
    return Boolean(group);
  }).reduce(function (out, _ref3) {
    var _extends2;

    var key = _ref3[0],
        f = _ref3[1];
    return _extends({}, out, (_extends2 = {}, _extends2[key] = f.map(function (_ref4) {
      var expression = _ref4.expression;
      return expression;
    }), _extends2));
  }, {});

  if (type === 'filter') {
    var _Object$entries$reduc;

    var basicFilters = list.filter(function (_ref5) {
      var group = _ref5.group,
          count = _ref5.count;
      return !group && !count;
    }).map(function (_ref6) {
      var expression = _ref6.expression;
      return "(" + expression + ")";
    });
    return (_Object$entries$reduc = Object.entries(groups).reduce(function (out, _ref7) {
      var group = _ref7[0],
          expressions = _ref7[1];

      if (group !== 'undefined' && !isEmpty(expressions)) {
        return [].concat(out, [buildArrayMatch(expressions)]);
      }

      return out;
    }, [])).concat.apply(_Object$entries$reduc, basicFilters).join(joinOperator);
  }

  return list.filter(function (_ref8) {
    var field = _ref8.field,
        count = _ref8.count;
    return !isEmpty(field) && count;
  }).map(function (_ref9) {
    var group = _ref9.group,
        expression = _ref9.expression,
        count = _ref9.count;

    if (group && !isEmpty(groups[group])) {
      return buildArrayMatch(groups[group]);
    }

    return count ? expression : null;
  }).filter(function (e) {
    return e !== null;
  }).join(joinOperator);
}

export { groupFilters };
//# sourceMappingURL=utils.esm.js.map
