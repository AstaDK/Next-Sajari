import { extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { isFunction, isEmpty, replaceAll, isString } from '@sajari/react-sdk-utils';
import { EVENT_SELECTION_UPDATED, EVENT_OPTIONS_UPDATED } from '../../events.esm.js';
import { Listener } from '../Listener.esm.js';

var escapeValue = function escapeValue(input) {
  if (input === void 0) {
    input = '';
  }

  var escaped = input;
  var chars = [','];
  chars.forEach(function (c) {
    escaped = replaceAll(input, c, "\\" + c);
  });
  return escaped;
};

var events = [EVENT_SELECTION_UPDATED, EVENT_OPTIONS_UPDATED];

var FilterBuilder = /*#__PURE__*/function () {
  function FilterBuilder(_ref) {
    var _this$listeners;

    var _ref$initial = _ref.initial,
        initial = _ref$initial === void 0 ? [] : _ref$initial,
        _ref$joinOperator = _ref.joinOperator,
        joinOperator = _ref$joinOperator === void 0 ? 'OR' : _ref$joinOperator,
        _ref$multi = _ref.multi,
        multi = _ref$multi === void 0 ? true : _ref$multi,
        _ref$options = _ref.options,
        options = _ref$options === void 0 ? {} : _ref$options,
        _ref$array = _ref.array,
        array = _ref$array === void 0 ? false : _ref$array,
        name = _ref.name,
        field = _ref.field,
        group = _ref.group,
        _ref$count = _ref.count,
        count = _ref$count === void 0 ? isEmpty(options) : _ref$count;

    if (isString(initial)) {
      initial = [initial];
    }

    this.current = initial;
    this.initial = initial;
    this.name = name;
    this.group = group;
    this.field = field;
    this.count = count;
    this.options = options;
    this.multi = multi;
    this.array = array;
    this.joinOperator = joinOperator;
    this.listeners = (_this$listeners = {}, _this$listeners[EVENT_SELECTION_UPDATED] = new Listener(), _this$listeners[EVENT_OPTIONS_UPDATED] = new Listener(), _this$listeners);
  }

  var _proto = FilterBuilder.prototype;

  _proto.listen = function listen(event, callback) {
    if (!events.includes(event)) {
      throw new Error("Unknown event type \"" + event + "\"");
    }

    return this.listeners[event].listen(callback);
  };

  _proto.set = function set(values, merge) {
    var _this = this;

    if (merge === void 0) {
      merge = false;
    }

    if (merge) {
      var nonDuplicate = values.filter(function (v) {
        return !_this.current.includes(v);
      });
      this.current = [].concat(this.current, nonDuplicate);
    } else {
      this.current = values;
    }

    this.emitSelectionUpdated();
  };

  _proto.remove = function remove(values) {
    this.current = this.current.filter(function (v) {
      return !values.includes(v);
    });
    this.emitSelectionUpdated();
  };

  _proto.isSet = function isSet(name) {
    return this.current.includes(name);
  };

  _proto.setOptions = function setOptions(options, merge) {
    if (merge === void 0) {
      merge = false;
    }

    if (merge) {
      this.options = _extends({}, this.options, options);
    } else {
      this.options = options;
    }

    this.emitOptionsUpdated();
  };

  _proto.getName = function getName() {
    return this.name;
  };

  _proto.getGroup = function getGroup() {
    return this.group;
  };

  _proto.getField = function getField() {
    return this.field;
  };

  _proto.getCount = function getCount() {
    return this.count;
  };

  _proto.getOptions = function getOptions() {
    return this.options;
  };

  _proto.get = function get() {
    return this.current;
  };

  _proto.isArray = function isArray() {
    return this.array;
  };

  _proto.isMulti = function isMulti() {
    return this.multi;
  };

  _proto.filter = function filter() {
    var _this2 = this;

    var options = this.current.map(function (c) {
      var f = _this2.options[c];

      if (isFunction(f)) {
        f = f();
      }

      if (!isEmpty(f)) {
        f = escapeValue(f);
      }

      if (_this2.count && f === undefined && c) {
        f = _this2.array ? _this2.field + " ~ [\"" + c + "\"]" : _this2.field + " = \"" + c + "\"";
      }

      return f;
    }).filter(Boolean);

    if (options.length < 2) {
      return options.join('');
    }

    return options.map(function (f) {
      return "(" + f + ")";
    }).join(" " + this.joinOperator + " ");
  };

  _proto.getBuckets = function getBuckets() {
    var _this3 = this;

    return Object.entries(this.options).map(function (_ref2) {
      var key = _ref2[0],
          value = _ref2[1];
      return _this3.name + "_" + key + ":" + value;
    }).join(',');
  };

  _proto.reset = function reset() {
    this.current = [].concat(this.initial);
    this.emitSelectionUpdated();
  };

  _proto.emitSelectionUpdated = function emitSelectionUpdated() {
    this.listeners[EVENT_SELECTION_UPDATED].notify(function (listener) {
      listener();
    });
  };

  _proto.emitOptionsUpdated = function emitOptionsUpdated() {
    this.listeners[EVENT_OPTIONS_UPDATED].notify(function (listener) {
      listener();
    });
  };

  return FilterBuilder;
}();

export default FilterBuilder;
//# sourceMappingURL=FilterBuilder.esm.js.map
