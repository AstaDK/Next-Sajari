import { isSSR, isFunction } from '@sajari/react-sdk-utils';
import { EVENT_ANALYTICS_PAGE_CLOSED, EVENT_ANALYTICS_BODY_RESET, EVENT_ANALYTICS_RESULT_CLICKED } from '../../events.esm.js';

var GoogleAnalyticsObjects;

(function (GoogleAnalyticsObjects) {
  GoogleAnalyticsObjects["UniversalAnalytics"] = "_ua";
  GoogleAnalyticsObjects["AnalyticsJS"] = "ga";
  GoogleAnalyticsObjects["GTag"] = "gtag";
})(GoogleAnalyticsObjects || (GoogleAnalyticsObjects = {}));

var url = {
  decodeUriArgs: function decodeUriArgs(queryStr) {
    var args = {};
    var a = queryStr.split('&');

    for (var i in a) {
      if (a.hasOwnProperty(i)) {
        var b = a[i].split('=');
        args[decodeURIComponent(b[0])] = decodeURIComponent(b[1]);
      }
    }

    return args;
  },
  encodeUriArgs: function encodeUriArgs(args) {
    var queryParts = [];
    Object.keys(args).forEach(function (key) {
      return queryParts.push(encodeURIComponent(key) + "=" + encodeURIComponent(args[key]));
    });
    return queryParts.join('&');
  },
  mergeQueryStr: function mergeQueryStr(first) {
    var _this = this;

    var args = typeof first === 'string' ? this.decodeUriArgs(first) : first;

    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    rest.forEach(function (arg) {
      var next = typeof arg === 'string' ? _this.decodeUriArgs(arg) : arg;
      Object.keys(next).forEach(function (prop) {
        args[prop] = next[prop];
      });
    });
    return this.encodeUriArgs(args);
  },
  augmentUri: function augmentUri(uri, args) {
    var m = /^([^?]+)\?(.+)+$/.exec(uri);

    if (m) {
      return m[1] + "?" + this.mergeQueryStr(m[2], args);
    }

    return uri + "?" + this.encodeUriArgs(args);
  },
  getURLParameter: function getURLParameter(name) {
    var value = new RegExp("[?|&]" + name + "=([^&;]+?)(&|#|;|$)").exec(window.location.search) || [undefined, ''];
    return decodeURIComponent(value[1].replace(/\+/g, '%20')) || null;
  }
};
var GoogleAnalytics = /*#__PURE__*/function () {
  function GoogleAnalytics(analytics, id, param) {
    var _this2 = this;

    if (param === void 0) {
      param = 'q';
    }

    this.unregisterFunctions = [];

    this.detatch = function () {
      return _this2.unregisterFunctions.forEach(function (fn) {
        return fn();
      });
    };

    this.onBodyReset = function (body) {
      return _this2.sendGAPageView(body);
    };

    this.onResultClicked = function (body) {
      return _this2.sendGAPageView(body);
    };

    this.onPageClose = function (body) {
      return _this2.sendGAPageView(body);
    };

    this.unregisterFunctions.push(analytics.listen(EVENT_ANALYTICS_PAGE_CLOSED, this.onPageClose));
    this.unregisterFunctions.push(analytics.listen(EVENT_ANALYTICS_BODY_RESET, this.onBodyReset));
    this.unregisterFunctions.push(analytics.listen(EVENT_ANALYTICS_RESULT_CLICKED, this.onResultClicked));

    if (!isSSR()) {
      if (id !== undefined) {
        this.id = id;
      } else if (isFunction(window[GoogleAnalyticsObjects.AnalyticsJS])) {
        this.id = GoogleAnalyticsObjects.AnalyticsJS;
      } else if (isFunction(window[GoogleAnalyticsObjects.UniversalAnalytics])) {
        this.id = GoogleAnalyticsObjects.UniversalAnalytics;
      } else if (isFunction(window[GoogleAnalyticsObjects.GTag])) {
        this.id = GoogleAnalyticsObjects.GTag;
      } else {
        this.id = null;
      }
    } else {
      this.id = null;
    }

    this.param = param;
  }

  var _proto = GoogleAnalytics.prototype;

  _proto.sendGAPageView = function sendGAPageView(body) {
    if (this.id && !isSSR() && isFunction(window[this.id])) {
      var _url$augmentUri;

      var pageAddress = url.augmentUri(window.location.href.substring(window.location.origin.length), (_url$augmentUri = {}, _url$augmentUri[this.param] = body, _url$augmentUri));

      if (this.id === GoogleAnalyticsObjects.GTag) {
        window[this.id]('event', 'page_view', {
          page_location: pageAddress
        });
      } else {
        window[this.id]('send', 'pageview', pageAddress);
      }
    }
  };

  return GoogleAnalytics;
}();

export { GoogleAnalytics };
//# sourceMappingURL=GoogleAnalytics.esm.js.map
