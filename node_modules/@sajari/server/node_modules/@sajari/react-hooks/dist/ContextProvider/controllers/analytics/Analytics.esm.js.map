{"version":3,"file":"Analytics.esm.js","sources":["../../../../src/ContextProvider/controllers/analytics/Analytics.ts"],"sourcesContent":["import { isSSR } from '@sajari/react-sdk-utils';\n\nimport {\n  EVENT_ANALYTICS_BODY_RESET,\n  EVENT_ANALYTICS_PAGE_CLOSED,\n  EVENT_ANALYTICS_RESULT_CLICKED,\n  EVENT_RESPONSE_UPDATED,\n  EVENT_RESULT_CLICKED,\n  EVENT_TRACKING_RESET,\n} from '../../events';\nimport { CallbackFn, Listener, ListenerMap } from '../Listener';\nimport { Pipeline } from '../Pipeline';\nimport { Response } from '../Response';\nimport { Tracking } from '../tracking';\n\nconst events = [EVENT_ANALYTICS_PAGE_CLOSED, EVENT_ANALYTICS_BODY_RESET, EVENT_ANALYTICS_RESULT_CLICKED];\n\n/**\n * Analytics is an adaptor which listens for events on Pipeline and\n * Tracking and re-emits them as analytics-based events.\n */\nexport class Analytics {\n  private enabled: boolean;\n\n  private body: string;\n\n  private pipeline: Pipeline;\n\n  private tracking: Tracking;\n\n  private listeners: ListenerMap;\n\n  private longestNonAutocompletedBody: string;\n\n  private longestAutocompletedBody: string;\n\n  private bodyLabel: string;\n\n  private bodyAutocompletedLabel: string;\n\n  /**\n   * Constructs an analytics object that operates on the specified pipeline.\n   */\n  constructor(pipeline: Pipeline, tracking: Tracking) {\n    this.enabled = false;\n    this.body = '';\n\n    this.pipeline = pipeline;\n    this.tracking = tracking;\n\n    this.listeners = new Map(\n      Object.entries({\n        [EVENT_ANALYTICS_PAGE_CLOSED]: new Listener(),\n        [EVENT_ANALYTICS_BODY_RESET]: new Listener(),\n        [EVENT_ANALYTICS_RESULT_CLICKED]: new Listener(),\n      }),\n    );\n\n    // longest values are for sending the users last intended query on reset\n    this.longestNonAutocompletedBody = '';\n    this.longestAutocompletedBody = '';\n\n    // default to working with website pipeline values\n    this.bodyLabel = 'q';\n    this.bodyAutocompletedLabel = 'q';\n\n    if (!isSSR()) {\n      window.addEventListener('beforeunload', this.beforeunload);\n    }\n\n    this.pipeline.listen(EVENT_RESPONSE_UPDATED, this.responseUpdated);\n    this.pipeline.listen(EVENT_RESULT_CLICKED, this.resultClicked);\n    this.tracking.listen(EVENT_TRACKING_RESET, this.resetBody);\n  }\n\n  /**\n   * Register a listener for a specific event.\n   * @param event Event to listen for\n   * @param callback Callback to run when the event happens.\n   * @return The unregister function to remove the callback from the listener.\n   */\n  public listen(event: string, callback: CallbackFn) {\n    if (events.indexOf(event) === -1) {\n      throw new Error(`Unknown event type \"${event}\"`);\n    }\n    return (this.listeners.get(event) as Listener).listen(callback);\n  }\n\n  /**\n   * Runs before the page is closed/navigated away from. Can trigger a ga onPageClose call.\n   */\n  public beforeunload = () => {\n    if (this.enabled && this.body) {\n      (this.listeners.get(EVENT_ANALYTICS_PAGE_CLOSED) as Listener).notify((callback) => {\n        callback(this.body);\n      });\n      this.enabled = false; // TODO(tbillington): unload -> disable!!\n    }\n  };\n\n  /**\n   * Resets the currently held parameters. Can trigger a ga onBodyReset call.\n   */\n  public resetBody = () => {\n    if (this.enabled) {\n      (this.listeners.get(EVENT_ANALYTICS_BODY_RESET) as Listener).notify((callback) => {\n        callback(this.body);\n      });\n\n      this.longestNonAutocompletedBody = '';\n      this.longestAutocompletedBody = '';\n      this.enabled = false;\n    }\n  };\n\n  /**\n   * Runs when the response has been updated. Updates the currently held search parameters.\n   */\n  public responseUpdated = (response: Response) => {\n    if (response.isEmpty() || response.isError()) {\n      return;\n    }\n\n    this.enabled = true;\n\n    const originalBody = (response.getQueryValues() as Map<string, string>).get(this.bodyLabel) || '';\n    const responseBody = (response.getValues() as Map<string, string>).get(this.bodyAutocompletedLabel) || originalBody;\n\n    this.body = responseBody;\n\n    // Here we check the lengths of the non-autocompleted bodies.\n    // We do this because while the user is backspacing their query\n    // the new autocompleted body may be longer than their actual input,\n    // but we want to record their input rather than a completion resulting\n    // from them removing chars.\n    if (originalBody.length >= this.longestNonAutocompletedBody.length) {\n      this.longestNonAutocompletedBody = originalBody;\n      this.longestAutocompletedBody = responseBody;\n    }\n  };\n\n  /**\n   * Runs when a result has been clicked. Can trigger a ga onResultClicked call.\n   */\n  public resultClicked = () => {\n    if (this.enabled && this.body) {\n      (this.listeners.get(EVENT_ANALYTICS_RESULT_CLICKED) as Listener).notify((callback) => {\n        callback(this.body);\n      });\n      this.longestNonAutocompletedBody = '';\n      this.longestAutocompletedBody = '';\n      this.enabled = false;\n    }\n  };\n}\n"],"names":["events","EVENT_ANALYTICS_PAGE_CLOSED","EVENT_ANALYTICS_BODY_RESET","EVENT_ANALYTICS_RESULT_CLICKED","Analytics","pipeline","tracking","enabled","body","listeners","get","notify","callback","longestNonAutocompletedBody","longestAutocompletedBody","response","isEmpty","isError","originalBody","getQueryValues","bodyLabel","responseBody","getValues","bodyAutocompletedLabel","length","Map","Object","entries","Listener","isSSR","window","addEventListener","beforeunload","listen","EVENT_RESPONSE_UPDATED","responseUpdated","EVENT_RESULT_CLICKED","resultClicked","EVENT_TRACKING_RESET","resetBody","event","indexOf","Error"],"mappings":"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"}