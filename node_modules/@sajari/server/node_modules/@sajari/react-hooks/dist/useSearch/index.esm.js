import { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';
import { useState, useCallback, useEffect } from 'react';
import { defaultConfig } from '../ContextProvider/Config.esm.js';
import { EVENT_RESPONSE_UPDATED, EVENT_VALUES_UPDATED } from '../ContextProvider/events.esm.js';
import { useContext } from '../ContextProvider/index.esm.js';

function useCustomSearch(_ref) {
  var pipeline = _ref.pipeline,
      variables = _ref.variables;

  var _useState = useState(false),
      searching = _useState[0],
      setSearching = _useState[1];

  var searchFn = useCallback(function (q) {
    setSearching(true);

    if (q === '') {
      pipeline.clearResponse(variables.get());
    } else {
      if (q) {
        var _variables$set;

        variables.set((_variables$set = {}, _variables$set[defaultConfig.qParam] = q, _variables$set));
      }

      pipeline.search(variables.get());
    }
  }, [pipeline, variables]);

  var _useState2 = useState({
    search: searchFn,
    error: null
  }),
      searchOutput = _useState2[0],
      setSearchOutput = _useState2[1];

  useEffect(function () {
    searchFn();
    return pipeline.listen(EVENT_RESPONSE_UPDATED, function (response) {
      setSearching(false);
      setSearchOutput(function (o) {
        return _extends({}, o, {
          results: response == null ? void 0 : response.getResults(),
          latency: response == null ? void 0 : response.getTime(),
          totalResults: response == null ? void 0 : response.getTotalResults(),
          error: response == null ? void 0 : response.getError()
        });
      });
    });
  }, []);
  useEffect(function () {
    return variables.listen(EVENT_VALUES_UPDATED, function () {
      searchFn();
    });
  }, []);
  return _extends({}, searchOutput, {
    searching: searching
  });
}

function useNormalSearch(_ref2) {
  var queryOverride = _ref2.queryOverride,
      _ref2$allowEmptySearc = _ref2.allowEmptySearch,
      allowEmptySearch = _ref2$allowEmptySearc === void 0 ? true : _ref2$allowEmptySearc;

  var _useState3 = useState(null),
      error = _useState3[0],
      setError = _useState3[1];

  var _useContext = useContext(),
      _useContext$search = _useContext.search,
      searching = _useContext$search.searching,
      response = _useContext$search.response,
      search = _useContext$search.search,
      _useContext$autocompl = _useContext.autocomplete,
      searchInstantFn = _useContext$autocompl.search,
      suggestions = _useContext$autocompl.suggestions;

  var results = response == null ? void 0 : response.getResults();
  var searchInstant = useCallback(function (q) {
    return searchInstantFn(q);
  }, []);
  useEffect(function () {
    if (queryOverride !== undefined) {
      if (allowEmptySearch || queryOverride !== '') {
        search(queryOverride);
      }
    } else {
      search();
    }
  }, [queryOverride]);
  useEffect(function () {
    var _response$getError$er, _response$getError;

    if (response) {
      switch (true) {
        case response.isError():
          setError((_response$getError$er = (_response$getError = response.getError()) == null ? void 0 : _response$getError.error) != null ? _response$getError$er : new Error('Something went wrong. Please try again.'));
          break;

        case !response.isError():
          setError(null);
          break;
      }
    }
  }, [response]);
  return {
    latency: response == null ? void 0 : response.getTime(),
    totalResults: response == null ? void 0 : response.getTotalResults(),
    suggestions: suggestions != null ? suggestions : [],
    results: results,
    search: search,
    searchInstant: searchInstant,
    searching: searching,
    error: error
  };
}

function useSearch(params) {
  if (typeof params === 'object' && 'pipeline' in params && 'variables' in params) {
    return useCustomSearch(params);
  }

  return useNormalSearch(params != null ? params : {});
}

export default useSearch;
//# sourceMappingURL=index.esm.js.map
