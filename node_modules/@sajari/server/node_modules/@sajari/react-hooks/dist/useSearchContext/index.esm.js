import { isNullOrUndefined } from '@sajari/react-sdk-utils';
import { useContext } from '../ContextProvider/index.esm.js';
import { mapToObject } from '../utils/mapToObject.esm.js';
import '../utils/response.esm.js';
import usePagination from '../usePagination/index.esm.js';

function useSearchContext() {
  var _response$isEmpty;

  var _useContext = useContext(),
      _useContext$search = _useContext.search,
      config = _useContext$search.config,
      response = _useContext$search.response,
      search = _useContext$search.search,
      searching = _useContext$search.searching,
      _useContext$search$fi = _useContext$search.fields,
      fields = _useContext$search$fi === void 0 ? {} : _useContext$search$fi,
      clear = _useContext$search.clear;

  var _usePagination = usePagination('search'),
      page = _usePagination.page,
      resultsPerPage = _usePagination.resultsPerPage,
      totalResults = _usePagination.totalResults,
      pageCount = _usePagination.pageCount,
      setPage = _usePagination.setPage;

  var mapResponse = mapToObject(response == null ? void 0 : response.getResponse());
  var results = response == null ? void 0 : response.getResults();
  return {
    empty: (_response$isEmpty = response == null ? void 0 : response.isEmpty()) != null ? _response$isEmpty : false,
    error: response == null ? void 0 : response.getError(),
    queryValues: response == null ? void 0 : response.getQueryValues(),
    latency: response == null ? void 0 : response.getTime(),
    page: page,
    resultsPerPage: resultsPerPage,
    totalResults: totalResults,
    pageCount: pageCount,
    setPage: setPage,
    search: search,
    results: results,
    response: mapResponse,
    searching: searching,
    searched: !isNullOrUndefined(results),
    fields: fields,
    config: config,
    clear: clear
  };
}

export default useSearchContext;
//# sourceMappingURL=index.esm.js.map
