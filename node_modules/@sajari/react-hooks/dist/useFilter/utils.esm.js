import { isSSR } from '@sajari/react-sdk-utils';

var priceRangePattern = /\d+\s-\s\d+/gm;
var patternTest = /*#__PURE__*/priceRangePattern.test.bind(priceRangePattern);
var collator = /*#__PURE__*/new Intl.Collator(! /*#__PURE__*/isSSR() ? window.navigator.language : 'en-US', {
  numeric: true
});
var sortItems = function sortItems(list, sort, asc) {
  if (sort === void 0) {
    sort = 'alpha';
  }

  if (asc === void 0) {
    asc = true;
  }

  if (sort === 'none') {
    return list;
  }

  var byLabel = sort !== 'count';
  return [].concat(list).sort(function (_ref, _ref2) {
    var labelLeft = _ref[0],
        valueLeft = _ref[1];
    var labelRight = _ref2[0],
        valueRight = _ref2[1];
    var left = String(byLabel ? labelLeft : valueLeft);
    var right = String(byLabel ? labelRight : valueRight);

    switch (true) {
      case [left, right].every(patternTest):
        {
          var minLeft = left.split(' - ').map(Number)[0];
          var minRight = right.split(' - ').map(Number)[0];

          if (asc) {
            return collator.compare(String(minLeft), String(minRight));
          }

          return collator.compare(String(minRight), String(minLeft));
        }

      case left.startsWith('>'):
      case right.startsWith('<'):
        return asc ? 1 : -1;

      case left.startsWith('<'):
      case right.startsWith('>'):
        return asc ? -1 : 1;
    }

    if (asc) {
      return collator.compare(String(left), String(right));
    }

    return collator.compare(String(right), String(left));
  });
};

export { sortItems };
//# sourceMappingURL=utils.esm.js.map
