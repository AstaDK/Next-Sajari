import { useMemo, useCallback } from 'react';
import { useContext } from '../ContextProvider/index.esm.js';

function usePagination(key) {
  if (key === void 0) {
    key = 'search';
  }

  var context = useContext();
  var paginate = context.paginate;
  var _context$key = context[key],
      response = _context$key.response,
      config = _context$key.config;
  var queryValues = response == null ? void 0 : response.getQueryValues();
  var page = (queryValues == null ? void 0 : queryValues.get(config.pageParam)) ? parseInt(queryValues.get(config.pageParam), 10) : 1;
  var resultsPerPage = (queryValues == null ? void 0 : queryValues.get(config.resultsPerPageParam)) ? parseInt(queryValues == null ? void 0 : queryValues.get(config.resultsPerPageParam), 10) : 15;
  var totalResults = (response == null ? void 0 : response.getTotalResults()) || 0;
  var totalPages = Math.ceil(totalResults / resultsPerPage);
  var hasNext = useMemo(function () {
    return page < totalPages;
  }, [page, totalPages]);
  var hasPrevious = useMemo(function () {
    return page > 1;
  }, [page]);
  var nextPage = useCallback(function () {
    return hasNext && paginate(page + 1);
  }, [paginate, hasNext]);
  var previousPage = useCallback(function () {
    return hasPrevious && paginate(page - 1);
  }, [paginate, hasPrevious]);
  return {
    page: page,
    pageCount: totalPages,
    totalResults: totalResults,
    setPage: paginate,
    resultsPerPage: resultsPerPage,
    hasNext: hasNext,
    hasPrevious: hasPrevious,
    nextPage: nextPage,
    previousPage: previousPage
  };
}

export default usePagination;
//# sourceMappingURL=index.esm.js.map
