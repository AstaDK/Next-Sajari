import { Config } from './Config';
import { FilterBuilder, Pipeline, RangeFilterBuilder, Response, Variables } from './controllers';
export declare type SearchFn = (query?: string, override?: boolean) => void;
export declare type ClearFn = (variables?: {
    [k: string]: string | undefined;
}) => void;
export declare type ResultClickedFn = (url: string) => void;
export declare type PaginateFn = (page: number) => void;
export interface PipelineContextState {
    variables: Variables;
    pipeline: Pipeline;
    response: Response | null;
    query: string;
    completion: string;
    suggestions: string[];
    config: Config;
    search: SearchFn;
    clear: ClearFn;
    fields?: FieldDictionary;
    searching: boolean;
    filters?: (FilterBuilder | RangeFilterBuilder)[];
}
export interface ProviderPipelineConfig {
    pipeline: Pipeline;
    variables?: Variables;
    config?: Config;
    fields?: FieldDictionary;
    filters?: (FilterBuilder | RangeFilterBuilder)[];
}
export interface ProviderPipelineState {
    response: Response | null;
    query: string;
    config: Config;
    completion: string;
    suggestions: string[];
}
export interface SearchProviderValues {
    search: ProviderPipelineConfig;
    autocomplete?: ProviderPipelineConfig;
    defaultFilter?: string;
    searchOnLoad?: boolean;
    initialResponse?: string;
}
export interface PipelineProviderState {
    search: ProviderPipelineState;
    autocomplete: ProviderPipelineState;
}
export interface Context {
    search: PipelineContextState;
    autocomplete: PipelineContextState;
    resultClicked: ResultClickedFn;
    paginate: PaginateFn;
}
declare type Field = ((data: Record<string, any>) => any) | string | string[] | false;
export declare class FieldDictionary {
    id?: Field;
    url?: Field;
    title?: Field;
    subtitle?: Field;
    description?: Field;
    image?: Field;
    price?: Field;
    originalPrice?: Field;
    rating?: Field;
    constructor(input?: FieldDictionary);
}
export {};
