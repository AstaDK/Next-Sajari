import { EVENT_SELECTION_UPDATED, EVENT_OPTIONS_UPDATED, EVENT_RANGE_UPDATED } from '../../events.esm.js';
import { Listener } from '../Listener.esm.js';
import FilterBuilder from './FilterBuilder.esm.js';
import RangeFilterBuilder from './RangeFilterBuilder.esm.js';
import { groupFilters } from './utils.esm.js';

var events = [EVENT_SELECTION_UPDATED, EVENT_OPTIONS_UPDATED, EVENT_RANGE_UPDATED];
function combineFilters(filters, joinOperator) {
  var _listeners;

  if (joinOperator === void 0) {
    joinOperator = 'AND';
  }

  var listeners = (_listeners = {}, _listeners[EVENT_SELECTION_UPDATED] = new Listener(), _listeners[EVENT_OPTIONS_UPDATED] = new Listener(), _listeners[EVENT_RANGE_UPDATED] = new Listener(), _listeners);
  var removeListenerFuncs = [];

  function listen(event, callback) {
    if (events.indexOf(event) === -1) {
      throw new Error("Unknown event type \"" + event + "\"");
    }

    return listeners[event].listen(callback);
  }

  filters.forEach(function (f) {
    if (f instanceof FilterBuilder) {
      removeListenerFuncs.push(f.listen(EVENT_SELECTION_UPDATED, function () {
        listeners[EVENT_SELECTION_UPDATED].notify(function (listener) {
          listener(f);
        });
      }), f.listen(EVENT_OPTIONS_UPDATED, function () {
        listeners[EVENT_OPTIONS_UPDATED].notify(function (listener) {
          listener(f);
        });
      }));
    }

    if (f instanceof RangeFilterBuilder) {
      removeListenerFuncs.push(f.listen(EVENT_RANGE_UPDATED, function () {
        listeners[EVENT_RANGE_UPDATED].notify(function (listener) {
          listener(f);
        });
      }));
    }
  });

  function removeChildFilterListeners() {
    removeListenerFuncs.forEach(function (fn) {
      return fn();
    });
  }

  var filter = function filter() {
    return groupFilters(filters, 'filter', " " + joinOperator + " ");
  };

  var buckets = function buckets() {
    return filters.filter(function (f) {
      return f instanceof FilterBuilder && !f.getCount();
    }).map(function (f) {
      return f instanceof FilterBuilder && f.getBuckets();
    }).filter(Boolean).join(',');
  };

  var countFilters = function countFilters() {
    return groupFilters(filters, 'countFilters', ',');
  };

  var count = function count() {
    return filters.filter(function (f) {
      return f instanceof FilterBuilder && f.getCount();
    }).map(function (f) {
      return f instanceof FilterBuilder && f.getField();
    }).filter(Boolean).join(',');
  };

  var min = function min() {
    return filters.filter(function (f) {
      return f instanceof RangeFilterBuilder && f.isAggregate();
    }).map(function (f) {
      return f.getField();
    }).join(',');
  };

  var max = function max() {
    return filters.filter(function (f) {
      return f instanceof RangeFilterBuilder && f.isAggregate();
    }).map(function (f) {
      return f.getField();
    }).join(',');
  };

  return {
    filter: filter,
    listen: listen,
    buckets: buckets,
    countFilters: countFilters,
    count: count,
    removeChildFilterListeners: removeChildFilterListeners,
    max: max,
    min: min
  };
}

export default combineFilters;
//# sourceMappingURL=combineFilters.esm.js.map
