import { Range, RangeFilterOptions } from './types';
export default class RangeFilterBuilder {
    private initial;
    private range;
    private name;
    private group;
    private field;
    private min;
    private max;
    private step;
    private frozen;
    private aggregate;
    private listeners;
    private formatter;
    constructor({ field, name, group, aggregate, initial, min, max, step, formatter, }: RangeFilterOptions);
    listen(event: string, callback: (filter: RangeFilterBuilder) => void): () => void;
    get(): Range | null;
    set(range: Range | null, emitEvent?: boolean): void;
    getName(): string;
    getGroup(): string | undefined;
    getField(): string;
    getFrozen(): boolean;
    setMin(value: number): void;
    setMax(value: number): void;
    getMinMax(): number[];
    getStep(): number;
    filter(): string;
    isAggregate(): boolean;
    setFrozen(frozen: boolean): void;
    hasChanged(): boolean;
    reset(emitEvent?: boolean): void;
    format(value: Range): Range;
    protected emitRangeUpdated(): void;
}
