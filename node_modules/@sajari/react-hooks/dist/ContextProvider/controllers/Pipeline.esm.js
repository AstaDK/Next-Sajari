import { isString, isSSR } from '@sajari/react-sdk-utils';
import { EVENT_SEARCH_SENT, EVENT_RESPONSE_UPDATED, EVENT_RESULT_CLICKED } from '../events.esm.js';
import { Listener } from './Listener.esm.js';
import { Analytics } from './analytics/Analytics.esm.js';
import { GoogleAnalytics } from './analytics/GoogleAnalytics.esm.js';
import { Client } from '@sajari/sdk-js';
import { Response } from './Response.esm.js';
import './tracking/Tracking.esm.js';
import './tracking/ClickTracking.esm.js';
import { NoTracking } from './tracking/NoTracking.esm.js';
import './tracking/PosNegTracking.esm.js';

var events = [EVENT_SEARCH_SENT, EVENT_RESPONSE_UPDATED, EVENT_RESULT_CLICKED];
var Pipeline = /*#__PURE__*/function () {
  function Pipeline(config, name, tracking, analyticsAdapters) {
    var _this = this;

    if (tracking === void 0) {
      tracking = new NoTracking();
    }

    if (analyticsAdapters === void 0) {
      analyticsAdapters = [GoogleAnalytics];
    }

    this.response = new Response(null);
    var account = config.account,
        collection = config.collection,
        endpoint = config.endpoint,
        key = config.key,
        secret = config.secret;
    this.config = config;
    var p = {
      name: undefined,
      version: undefined
    };

    if (isString(name)) {
      p.name = name;
    } else if ('name' in name) {
      p.name = name.name;
      p.version = name.version;
    }

    if (isSSR()) {
      this.client = new Client(account, collection, endpoint, key, secret);
    } else {
      this.client = new Client(account, collection, endpoint);
    }

    this.pipeline = this.client.pipeline(p.name, p.version);
    this.tracking = tracking;
    this.listeners = new Map([[EVENT_SEARCH_SENT, new Listener()], [EVENT_RESPONSE_UPDATED, new Listener()], [EVENT_RESULT_CLICKED, new Listener()]]);
    this.searchCount = 0;
    this.response = new Response(null);
    this.analytics = new Analytics(this, this.tracking);
    analyticsAdapters.forEach(function (Adapter) {
      new Adapter(_this.analytics);
    });
  }

  var _proto = Pipeline.prototype;

  _proto.listen = function listen(event, callback) {
    if (events.indexOf(event) === -1) {
      throw new Error("Unknown event type \"" + event + "\"");
    }

    return this.listeners.get(event).listen(callback);
  };

  _proto._emitSearchSent = function _emitSearchSent(variables) {
    this.listeners.get(EVENT_SEARCH_SENT).notify(function (listener) {
      listener(variables);
    });
  };

  _proto._emitResponseUpdated = function _emitResponseUpdated(response) {
    this.listeners.get(EVENT_RESPONSE_UPDATED).notify(function (listener) {
      listener(response);
    });
  };

  _proto.emitResultClicked = function emitResultClicked(value) {
    this.listeners.get(EVENT_RESULT_CLICKED).notify(function (listener) {
      listener(value);
    });
  };

  _proto.search = function search(variables) {
    var _this2 = this;

    this.searchCount += 1;
    var currentSearch = this.searchCount;
    this.pipeline.search(variables, this.tracking.next(variables)).then(function (_ref) {
      var response = _ref[0],
          responseValues = _ref[1];

      if (currentSearch < _this2.searchCount) {
        return;
      }

      _this2.response = new Response(null, new Map(Object.entries(variables)), new Map(Object.entries(response)), new Map(Object.entries(responseValues)));
    })["catch"](function (error) {
      console.error(error);

      if (currentSearch < _this2.searchCount) {
        return;
      }

      _this2.response = new Response(error, new Map(Object.entries(variables)), undefined, undefined);
    })["finally"](function () {
      _this2._emitResponseUpdated(_this2.response);
    });

    this._emitSearchSent(variables);
  };

  _proto.clearResponse = function clearResponse(variables) {
    this.tracking.next(variables);
    this.searchCount += 1;
    this.response = new Response(null);

    this._emitResponseUpdated(this.response);
  };

  _proto.getResponse = function getResponse() {
    return this.response;
  };

  _proto.getAnalytics = function getAnalytics() {
    return this.analytics;
  };

  _proto.getClient = function getClient() {
    return this.client;
  };

  _proto.getTracking = function getTracking() {
    return this.tracking;
  };

  return Pipeline;
}();

export { Pipeline };
//# sourceMappingURL=Pipeline.esm.js.map
