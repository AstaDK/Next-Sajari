import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { defaultConfig } from '../Config.esm.js';
import { EVENT_VALUES_UPDATED } from '../events.esm.js';
import { Listener } from './Listener.esm.js';

var Variables = /*#__PURE__*/function () {
  function Variables(variables) {
    var _extends2;

    if (variables === void 0) {
      variables = {};
    }

    this.listeners = new Map([[EVENT_VALUES_UPDATED, new Listener()]]);
    this.variables = new Map(Object.entries(_extends((_extends2 = {}, _extends2[defaultConfig.qParam] = '', _extends2[defaultConfig.resultsPerPageParam] = 15, _extends2), variables)));
  }

  var _proto = Variables.prototype;

  _proto.listen = function listen(event, callback) {
    if (event !== EVENT_VALUES_UPDATED) {
      throw new Error("Unknown event type \"" + event + "\"");
    }

    return this.listeners.get(event).listen(callback);
  };

  _proto.set = function set(variables) {
    this._set(variables);

    this._emitUpdated(variables);
  };

  _proto.get = function get() {
    var variables = {};
    this.variables.forEach(function (variable, key) {
      if (typeof variable === 'function') {
        variables[key] = variable();
      } else if (Array.isArray(variable)) {
        variables[key] = variable.join(',');
      } else {
        variables[key] = String(variable);
      }
    });
    return variables;
  };

  _proto._emitUpdated = function _emitUpdated(changes) {
    var _this = this;

    this.listeners.get(EVENT_VALUES_UPDATED).notify(function (listener) {
      return listener(changes, function (variables) {
        return _this._set(variables);
      });
    });
  };

  _proto._set = function _set(variables) {
    var _this2 = this;

    Object.keys(variables).forEach(function (key) {
      if (variables[key] === undefined) {
        _this2.variables["delete"](key);
      } else {
        _this2.variables.set(key, variables[key]);
      }
    });
  };

  return Variables;
}();

export { Variables };
//# sourceMappingURL=Variables.esm.js.map
