import { isSSR } from '@sajari/react-sdk-utils';
import { EVENT_ANALYTICS_PAGE_CLOSED, EVENT_ANALYTICS_BODY_RESET, EVENT_ANALYTICS_RESULT_CLICKED, EVENT_RESPONSE_UPDATED, EVENT_RESULT_CLICKED, EVENT_TRACKING_RESET } from '../../events.esm.js';
import { Listener } from '../Listener.esm.js';

var events = [EVENT_ANALYTICS_PAGE_CLOSED, EVENT_ANALYTICS_BODY_RESET, EVENT_ANALYTICS_RESULT_CLICKED];
var Analytics = /*#__PURE__*/function () {
  function Analytics(pipeline, tracking) {
    var _this = this,
        _Object$entries;

    this.beforeunload = function () {
      if (_this.enabled && _this.body) {
        _this.listeners.get(EVENT_ANALYTICS_PAGE_CLOSED).notify(function (callback) {
          callback(_this.body);
        });

        _this.enabled = false;
      }
    };

    this.resetBody = function () {
      if (_this.enabled) {
        _this.listeners.get(EVENT_ANALYTICS_BODY_RESET).notify(function (callback) {
          callback(_this.body);
        });

        _this.longestNonAutocompletedBody = '';
        _this.longestAutocompletedBody = '';
        _this.enabled = false;
      }
    };

    this.responseUpdated = function (response) {
      if (response.isEmpty() || response.isError()) {
        return;
      }

      _this.enabled = true;
      var originalBody = response.getQueryValues().get(_this.bodyLabel) || '';
      var responseBody = response.getValues().get(_this.bodyAutocompletedLabel) || originalBody;
      _this.body = responseBody;

      if (originalBody.length >= _this.longestNonAutocompletedBody.length) {
        _this.longestNonAutocompletedBody = originalBody;
        _this.longestAutocompletedBody = responseBody;
      }
    };

    this.resultClicked = function () {
      if (_this.enabled && _this.body) {
        _this.listeners.get(EVENT_ANALYTICS_RESULT_CLICKED).notify(function (callback) {
          callback(_this.body);
        });

        _this.longestNonAutocompletedBody = '';
        _this.longestAutocompletedBody = '';
        _this.enabled = false;
      }
    };

    this.enabled = false;
    this.body = '';
    this.pipeline = pipeline;
    this.tracking = tracking;
    this.listeners = new Map(Object.entries((_Object$entries = {}, _Object$entries[EVENT_ANALYTICS_PAGE_CLOSED] = new Listener(), _Object$entries[EVENT_ANALYTICS_BODY_RESET] = new Listener(), _Object$entries[EVENT_ANALYTICS_RESULT_CLICKED] = new Listener(), _Object$entries)));
    this.longestNonAutocompletedBody = '';
    this.longestAutocompletedBody = '';
    this.bodyLabel = 'q';
    this.bodyAutocompletedLabel = 'q';

    if (!isSSR()) {
      window.addEventListener('beforeunload', this.beforeunload);
    }

    this.pipeline.listen(EVENT_RESPONSE_UPDATED, this.responseUpdated);
    this.pipeline.listen(EVENT_RESULT_CLICKED, this.resultClicked);
    this.tracking.listen(EVENT_TRACKING_RESET, this.resetBody);
  }

  var _proto = Analytics.prototype;

  _proto.listen = function listen(event, callback) {
    if (events.indexOf(event) === -1) {
      throw new Error("Unknown event type \"" + event + "\"");
    }

    return this.listeners.get(event).listen(callback);
  };

  return Analytics;
}();

export { Analytics };
//# sourceMappingURL=Analytics.esm.js.map
