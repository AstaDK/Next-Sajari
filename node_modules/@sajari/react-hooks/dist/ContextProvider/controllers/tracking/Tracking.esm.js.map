{"version":3,"file":"Tracking.esm.js","sources":["../../../../src/ContextProvider/controllers/tracking/Tracking.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable no-underscore-dangle */\nimport { Session } from '@sajari/sdk-js';\n\nimport { EVENT_TRACKING_RESET } from '../../events';\nimport { CallbackFn, Listener, ListenerMap, UnlistenFn } from '../Listener';\n\nconst events = [EVENT_TRACKING_RESET];\n\nexport type TrackingValues = Record<string, string>;\n\nexport class Tracking {\n  public clientTracking: Session | null = null;\n\n  private listeners: ListenerMap;\n\n  public field: string;\n\n  constructor() {\n    this.listeners = new Map(\n      Object.entries({\n        [EVENT_TRACKING_RESET]: new Listener(),\n      }),\n    );\n  }\n\n  /**\n   * Register a listener for a specific event.\n   * @param event Event to listen for\n   * @param callback Callback to run when the event happens.\n   * @return The unregister function to remove the callback from the listener.\n   */\n  public listen(event: string, callback: CallbackFn): UnlistenFn {\n    if (events.indexOf(event) === -1) {\n      throw new Error(`Unknown event type \"${event}\"`);\n    }\n    return (this.listeners.get(event) as Listener).listen(callback);\n  }\n\n  /**\n   * Emits a tracking reset event to the tracking reset event listener.\n   */\n  private emitTrackingReset(values: TrackingValues) {\n    (this.listeners.get(EVENT_TRACKING_RESET) as Listener).notify((listener) => {\n      listener(values);\n    });\n  }\n\n  /**\n   * Reset the tracking.\n   * @param variables Key-value pair parameters to use in the pipeline.\n   */\n  public reset(variables?: TrackingValues) {\n    (this.clientTracking as Session).reset();\n\n    if (variables !== undefined) {\n      // eslint-disable-next-line no-underscore-dangle\n      this.emitTrackingReset(variables);\n    }\n  }\n\n  /**\n   * Construct a tracking session to be used in a search.\n   * @param variables Key-value pair parameters to use in the pipeline.\n   */\n  public next(variables: TrackingValues) {\n    if (this.clientTracking === null) {\n      throw new Error('clientTracking is null');\n    }\n\n    return this.clientTracking.next(variables);\n  }\n}\n"],"names":["events","EVENT_TRACKING_RESET","Tracking","listeners","Map","Object","entries","Listener","listen","event","callback","indexOf","Error","get","emitTrackingReset","values","notify","listener","reset","variables","clientTracking","undefined","next"],"mappings":";;;AAQA,IAAMA,MAAM,GAAG,CAACC,oBAAD,CAAf;IAIaC,QAAb;AAOE;;;AANO,uBAAA,GAAiC,IAAjC;AAOL,SAAKC,SAAL,GAAiB,IAAIC,GAAJ,CACfC,MAAM,CAACC,OAAP,wCACGL,oBADH,IAC0B,IAAIM,QAAJ,EAD1B,mBADe,CAAjB;AAKD;;AAbH;;AAAA,SAqBSC,MArBT,GAqBS,gBAAOC,KAAP,EAAsBC,QAAtB;AACL,QAAIV,MAAM,CAACW,OAAP,CAAeF,KAAf,MAA0B,CAAC,CAA/B,EAAkC;AAChC,YAAM,IAAIG,KAAJ,2BAAiCH,KAAjC,QAAN;AACD;;AACD,WAAQ,KAAKN,SAAL,CAAeU,GAAf,CAAmBJ,KAAnB,EAAuCD,MAAvC,CAA8CE,QAA9C,CAAR;AACD,GA1BH;;AAAA,SA+BUI,iBA/BV,GA+BU,2BAAkBC,MAAlB;AACL,SAAKZ,SAAL,CAAeU,GAAf,CAAmBZ,oBAAnB,EAAsDe,MAAtD,CAA6D,UAACC,QAAD;AAC5DA,MAAAA,QAAQ,CAACF,MAAD,CAAR;AACD,KAFA;AAGF,GAnCH;;AAAA,SAyCSG,KAzCT,GAyCS,eAAMC,SAAN;AACJ,SAAKC,cAAL,CAAgCF,KAAhC;;AAED,QAAIC,SAAS,KAAKE,SAAlB,EAA6B;AAE3B,WAAKP,iBAAL,CAAuBK,SAAvB;AACD;AACF,GAhDH;;AAAA,SAsDSG,IAtDT,GAsDS,cAAKH,SAAL;AACL,QAAI,KAAKC,cAAL,KAAwB,IAA5B,EAAkC;AAChC,YAAM,IAAIR,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,WAAO,KAAKQ,cAAL,CAAoBE,IAApB,CAAyBH,SAAzB,CAAP;AACD,GA5DH;;AAAA;AAAA;;;;"}