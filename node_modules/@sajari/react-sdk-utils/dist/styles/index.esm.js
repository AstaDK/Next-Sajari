import { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';
import { isNullOrUndefined } from '../assertion.esm.js';
import { css } from '@emotion/core';
import isPropValid from '@emotion/is-prop-valid';
export { default as styled } from './styled.esm.js';
export { default as tailwindConfig } from './tailwind.config.esm.js';
export { default as ThemeProvider, useTheme } from './theming.esm.js';

function mapStyles(styles) {
  return Object.entries(styles).reduce(function (obj, _ref) {
    var _Object$assign;

    var key = _ref[0],
        value = _ref[1];
    return Object.assign(obj, (_Object$assign = {}, _Object$assign[key] = css(value), _Object$assign));
  }, {});
}
function getStylesObject(styles, disableDefaultStyles) {
  if (disableDefaultStyles) {
    return {};
  }

  return styles;
}
function inferStylesObjectKeys(obj) {
  return obj;
}
function filterProps(props) {
  if (isNullOrUndefined(props)) {
    return {};
  }

  return Object.entries(props).reduce(function (current, _ref2) {
    var key = _ref2[0],
        value = _ref2[1];

    if (isPropValid(key)) {
      var _extends2;

      return _extends({}, current, (_extends2 = {}, _extends2[key] = value, _extends2));
    }

    return current;
  }, {});
}

export { filterProps, getStylesObject, inferStylesObjectKeys, mapStyles };
//# sourceMappingURL=index.esm.js.map
