import { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';
import { isPlainObject } from './assertion.esm.js';

function filterObject(input, keys, invert) {
  if (invert === void 0) {
    invert = false;
  }

  return Object.keys(input).filter(function (key) {
    return invert ? !keys.includes(key) : keys.includes(key);
  }).reduce(function (obj, key) {
    var _Object$assign;

    return Object.assign(obj, (_Object$assign = {}, _Object$assign[key] = input[key], _Object$assign));
  }, {});
}
var MergeOptions = function MergeOptions(options) {
  var _options$arrayHandlin;

  this.arrayHandling = (_options$arrayHandlin = options == null ? void 0 : options.arrayHandling) != null ? _options$arrayHandlin : 'concat';
};
function merge(options, target) {
  for (var _len = arguments.length, sources = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    sources[_key - 2] = arguments[_key];
  }

  if (isPlainObject(options)) {
    sources = [target].concat(sources);
    target = options;
    options = new MergeOptions();
  }

  if (!isPlainObject(target) || !sources.length) {
    return target;
  }

  var _options = options,
      arrayHandling = _options.arrayHandling;
  var source = sources.shift();

  if (!source || !isPlainObject(source)) {
    return target;
  }

  Object.keys(source).forEach(function (key) {
    var targetValue = target[key];
    var sourceValue = source[key];

    if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {
      switch (arrayHandling) {
        case 'concat':
          target[key] = targetValue.concat(sourceValue);
          break;

        case 'replace':
          target[key] = sourceValue;
          break;

        case 'union':
          target[key] = Array.from(new Set([].concat(targetValue, sourceValue)));
          break;
      }
    } else if (isPlainObject(targetValue) && isPlainObject(sourceValue)) {
      target[key] = merge(options, _extends({}, targetValue), sourceValue);
    } else {
      target[key] = sourceValue;
    }
  });
  return target;
}

export { MergeOptions, filterObject, merge };
//# sourceMappingURL=object.esm.js.map
