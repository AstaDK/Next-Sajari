{"version":3,"file":"react-helpers.esm.js","sources":["../src/react-helpers.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { Children, isValidElement } from 'react';\n\nexport type As<Props = any> = React.ElementType<Props>;\n\nexport type PropsWithAs<Props = any, Type extends As = As> = Props &\n  Omit<React.ComponentProps<Type>, 'as' | keyof Props> & {\n    as?: Type;\n  };\n\nexport interface ComponentWithAs<Props, DefaultType extends As> {\n  <Type extends As>(props: PropsWithAs<Props, Type> & { as: Type }): JSX.Element;\n  (props: PropsWithAs<Props, DefaultType>): JSX.Element;\n}\n\ntype ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>;\n\nexport function setRef<T = any>(ref: React.Ref<T> = null, value: T): void {\n  if (!ref) {\n    return;\n  }\n\n  if (typeof ref === 'function') {\n    ref(value);\n  } else {\n    // eslint-disable-next-line no-param-reassign\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * Get a list of all valid React child elements\n * @param children\n */\nexport function cleanChildren(children: React.ReactChildren | React.ReactNode): React.ReactElement[] {\n  return Children.toArray(children).filter((child) => isValidElement(child)) as React.ReactElement[];\n}\n\nexport function assignRef(ref: React.Ref<HTMLElement>, value: HTMLElement): ReturnType<typeof setRef> {\n  if (ref == null) {\n    return;\n  }\n\n  try {\n    setRef(ref, value);\n  } catch (error) {\n    throw new Error('Cannot assign value to ref');\n  }\n}\n\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\nexport function mergeRefs(...refs: Array<ReactRef<HTMLElement> | undefined>) {\n  return (value: HTMLElement) => {\n    refs.forEach((ref) => ref && assignRef(ref, value));\n  };\n}\n\nexport function forwardRefWithAs<Props, DefaultType extends As>(\n  component: React.ForwardRefRenderFunction<any, any>,\n): ComponentWithAs<Props, DefaultType> {\n  return (React.forwardRef(component) as unknown) as ComponentWithAs<Props, DefaultType>;\n}\n"],"names":["setRef","ref","value","current","cleanChildren","children","Children","toArray","filter","child","isValidElement","assignRef","error","Error","mergeRefs","refs","forEach","forwardRefWithAs","component","React","forwardRef"],"mappings":";;SAiBgBA,OAAgBC,KAA0BC;MAA1BD;AAAAA,IAAAA,MAAoB;;;AAClD,MAAI,CAACA,GAAL,EAAU;AACR;AACD;;AAED,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACD,GAFD,MAEO;AAEJD,IAAAA,GAAiC,CAACE,OAAlC,GAA4CD,KAA5C;AACF;AACF;SAMeE,cAAcC;AAC5B,SAAOC,QAAQ,CAACC,OAAT,CAAiBF,QAAjB,EAA2BG,MAA3B,CAAkC,UAACC,KAAD;AAAA,WAAWC,cAAc,CAACD,KAAD,CAAzB;AAAA,GAAlC,CAAP;AACD;SAEeE,UAAUV,KAA6BC;AACrD,MAAID,GAAG,IAAI,IAAX,EAAiB;AACf;AACD;;AAED,MAAI;AACFD,IAAAA,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAN;AACD,GAFD,CAEE,OAAOU,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF;SASeC;oCAAaC;AAAAA,IAAAA;;;AAC3B,SAAO,UAACb,KAAD;AACLa,IAAAA,IAAI,CAACC,OAAL,CAAa,UAACf,GAAD;AAAA,aAASA,GAAG,IAAIU,SAAS,CAACV,GAAD,EAAMC,KAAN,CAAzB;AAAA,KAAb;AACD,GAFD;AAGD;SAEee,iBACdC;AAEA,SAAQC,cAAK,CAACC,UAAN,CAAiBF,SAAjB,CAAR;AACD;;;;"}