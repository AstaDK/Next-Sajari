import React from 'react';
export declare type As<Props = any> = React.ElementType<Props>;
export declare type PropsWithAs<Props = any, Type extends As = As> = Props & Omit<React.ComponentProps<Type>, 'as' | keyof Props> & {
    as?: Type;
};
export interface ComponentWithAs<Props, DefaultType extends As> {
    <Type extends As>(props: PropsWithAs<Props, Type> & {
        as: Type;
    }): JSX.Element;
    (props: PropsWithAs<Props, DefaultType>): JSX.Element;
}
declare type ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>;
export declare function setRef<T = any>(ref: ((instance: T | null) => void) | React.RefObject<T> | null | undefined, value: T): void;
export declare function cleanChildren(children: React.ReactChildren | React.ReactNode): React.ReactElement[];
export declare function assignRef(ref: React.Ref<HTMLElement>, value: HTMLElement): ReturnType<typeof setRef>;
export declare function mergeRefs(...refs: Array<ReactRef<HTMLElement> | undefined>): (value: HTMLElement) => void;
export declare function forwardRefWithAs<Props, DefaultType extends As>(component: React.ForwardRefRenderFunction<any, any>): ComponentWithAs<Props, DefaultType>;
export {};
