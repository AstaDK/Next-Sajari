import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';
import { isNumber } from './assertion.esm.js';
import { isSSR } from './ssr.esm.js';

function clamp(input, min, max) {
  if (input === void 0) {
    input = 0;
  }

  if (min === void 0) {
    min = 0;
  }

  if (max === void 0) {
    max = 255;
  }

  return Math.min(Math.max(input, min), max);
}
function closest(target, values) {
  var match = values.reduce(function (prev, value) {
    return Math.abs(value - target) < Math.abs(prev - target) ? value : prev;
  });
  return [values.indexOf(match), match];
}
function getDecimalPlaces(value) {
  var match = /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/.exec(value.toString());

  if (!match) {
    return 0;
  }

  return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
}
function round(input, places) {
  return parseFloat(input.toFixed(places));
}
function roundToStep(input, step) {
  var places = getDecimalPlaces(step);
  return round(Math.round(input / step) * step, places);
}
function formatNumber(input, options) {
  var _ref = options != null ? options : {},
      _ref$neutral = _ref.neutral,
      neutral = _ref$neutral === void 0 ? true : _ref$neutral,
      _ref$language = _ref.language,
      language = _ref$language === void 0 ? !isSSR() ? navigator.language : 'en-US' : _ref$language,
      rest = _objectWithoutPropertiesLoose(_ref, ["neutral", "language"]);

  if (!isNumber(input)) {
    return input;
  }

  return new Intl.NumberFormat(neutral ? language.split('-')[0] : language, rest).format(input);
}
function formatPrice(input, options) {
  var price = input;

  var format = function format(val) {
    var value = Number(val);

    if (!isNumber(value)) {
      return input.toString();
    }

    return formatNumber(value, _extends({
      style: 'currency'
    }, options));
  };

  if (!Array.isArray(price)) {
    return format(price);
  }

  var prices = price.map(Number);
  var min = Math.min.apply(Math, prices);
  var max = Math.max.apply(Math, prices);

  if (min === max) {
    return format(min);
  }

  return format(min) + "\u2013" + format(max);
}

export { clamp, closest, formatNumber, formatPrice, getDecimalPlaces, round, roundToStep };
//# sourceMappingURL=number.esm.js.map
