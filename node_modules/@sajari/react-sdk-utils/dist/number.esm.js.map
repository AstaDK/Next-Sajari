{"version":3,"file":"number.esm.js","sources":["../src/number.ts"],"sourcesContent":["import { isNumber } from './assertion';\nimport { isSSR } from './ssr';\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * Example: limit the output of this computation to between 0 and 255\n * clamp((x * 255), 0, 255)\n *\n * @param input\n * @param min The lower boundary of the output range\n * @param max The upper boundary of the output range\n * @returns A number in the range [min, max]\n * @type Number\n */\nexport function clamp(input = 0, min = 0, max = 255): number {\n  return Math.min(Math.max(input, min), max);\n}\n\n/**\n * Find the number closest to a target value\n * @param target The target value\n * @param values The range of values to check\n */\nexport function closest(target: number, values: number[]): [number, number] {\n  const match = values.reduce((prev, value) => (Math.abs(value - target) < Math.abs(prev - target) ? value : prev));\n  return [values.indexOf(match), match];\n}\n\n/**\n * Get the number of decimal places\n * @param value\n */\nexport function getDecimalPlaces(value: number): number {\n  const match = /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/.exec(value.toString());\n\n  if (!match) {\n    return 0;\n  }\n\n  return Math.max(\n    0,\n    // Number of digits right of decimal point.\n    (match[1] ? match[1].length : 0) -\n      // Adjust for scientific notation.\n      (match[2] ? +match[2] : 0),\n  );\n}\n\n/**\n * Round to decimal places\n * @param input - the number to round\n * @param places - how many decimal places to round to\n */\nexport function round(input: number, places: number): number {\n  return parseFloat(input.toFixed(places));\n}\n\n/**\n * Round to the nearest step\n * @param input - the number to round\n * @param step - the step to round to\n */\nexport function roundToStep(input: number, step: number): number {\n  const places = getDecimalPlaces(step);\n  return round(Math.round(input / step) * step, places);\n}\n\ninterface FormatNumberOptions extends Intl.NumberFormatOptions {\n  // Whether to use the neutral locale (e.g. en rather than en-US)\n  neutral?: boolean;\n  // The language to use for formatting (e.g. en or en-US)\n  language?: string;\n}\n\n/**\n * Format a number into a localised format\n *\n * @param input - Number to format\n * @param options - Formatting options\n */\nexport function formatNumber(input: number, options?: FormatNumberOptions): string {\n  const { neutral = true, language = !isSSR() ? navigator.language : 'en-US', ...rest } = options ?? {};\n\n  if (!isNumber(input)) {\n    return input;\n  }\n\n  return new Intl.NumberFormat(neutral ? language.split('-')[0] : language, rest).format(input);\n}\n\n/**\n * Format a price or price range to display\n */\nexport function formatPrice(input: string | string[] | number, options: Omit<FormatNumberOptions, 'style'>): string {\n  const price = input;\n  const format = (val: string | number | undefined) => {\n    const value = Number(val);\n\n    if (!isNumber(value)) {\n      return input.toString();\n    }\n\n    return formatNumber(value, { style: 'currency', ...options });\n  };\n\n  if (!Array.isArray(price)) {\n    return format(price);\n  }\n\n  const prices = price.map(Number);\n  const min = Math.min(...prices);\n  const max = Math.max(...prices);\n\n  if (min === max) {\n    return format(min);\n  }\n\n  return `${format(min)}â€“${format(max)}`;\n}\n"],"names":["clamp","input","min","max","Math","closest","target","values","match","reduce","prev","value","abs","indexOf","getDecimalPlaces","exec","toString","length","round","places","parseFloat","toFixed","roundToStep","step","formatNumber","options","neutral","language","isSSR","navigator","rest","isNumber","Intl","NumberFormat","split","format","formatPrice","price","val","Number","style","Array","isArray","prices","map"],"mappings":"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"}