import React__default, { Children, isValidElement } from 'react';

function setRef(ref, value) {
  if (ref === void 0) {
    ref = null;
  }

  if (!ref) {
    return;
  }

  if (typeof ref === 'function') {
    ref(value);
  } else {
    ref.current = value;
  }
}
function cleanChildren(children) {
  return Children.toArray(children).filter(function (child) {
    return isValidElement(child);
  });
}
function assignRef(ref, value) {
  if (ref == null) {
    return;
  }

  try {
    setRef(ref, value);
  } catch (error) {
    throw new Error('Cannot assign value to ref');
  }
}
function mergeRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }

  return function (value) {
    refs.forEach(function (ref) {
      return ref && assignRef(ref, value);
    });
  };
}
function forwardRefWithAs(component) {
  return React__default.forwardRef(component);
}

export { assignRef, cleanChildren, forwardRefWithAs, mergeRefs, setRef };
//# sourceMappingURL=react-helpers.esm.js.map
