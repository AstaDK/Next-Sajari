'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var core = require('@emotion/core');
var isPropValid = _interopDefault(require('@emotion/is-prop-valid'));
var styled = _interopDefault(require('@emotion/styled'));
var emotionTheming = require('emotion-theming');
var createCache = _interopDefault(require('@emotion/cache'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function groupBy(collection, key) {
  return collection.reduce(function (out, obj) {
    var _extends2;

    return _extends({}, out, (_extends2 = {}, _extends2[obj[key]] = (out[obj[key]] || []).concat(obj), _extends2));
  }, {});
}

function parseURL(url) {
  if (url === void 0) {
    url = '';
  }

  try {
    return new URL(url);
  } catch (e) {
    return null;
  }
}

var getTag = function getTag(value) {
  if (value == null) {
    return value === undefined ? '[object Undefined]' : '[object Null]';
  }

  return toString.call(value);
};

function isNullOrUndefined(value) {
  return value === null || typeof value === 'undefined';
}
function isString(value) {
  return typeof value === 'string';
}
function isBoolean(value) {
  return typeof value === 'boolean';
}
function isNumber(value) {
  return typeof value === 'number' && !Number.isNaN(value);
}
function isFunction(value) {
  return typeof value === 'function';
}
function isArray(value) {
  return Array.isArray(value);
}
var isObject = function isObject(value) {
  var type = typeof value;
  return value !== null && (type === 'object' || type === 'function') && !isArray(value);
};
var isPlainObject = function isPlainObject(value) {
  if (!isObject(value) || getTag(value) !== '[object Object]') {
    return false;
  }

  if (Object.getPrototypeOf(value) === null) {
    return true;
  }

  var proto = value;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(value) === proto;
};
var isEmptyArray = function isEmptyArray(value) {
  return isArray(value) && value.length === 0;
};
var isEmptyObject = function isEmptyObject(value) {
  return isObject(value) && Object.keys(value).length === 0;
};
var isEmpty = function isEmpty(value) {
  if (isNullOrUndefined(value)) {
    return true;
  }

  if (isArray(value)) {
    return isEmptyArray(value);
  }

  if (isObject(value)) {
    return isEmptyObject(value);
  }

  if (isString(value)) {
    return value.trim() === '';
  }

  return false;
};
function isValidURL(value, allowRelative) {
  if (allowRelative === void 0) {
    allowRelative = false;
  }

  if (!value || isEmpty(value)) {
    return false;
  }

  if (allowRelative && value.startsWith('/')) {
    return true;
  }

  return parseURL(value) !== null;
}

var __DEV__ = "development" !== 'production';

function createContext(options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$strict = _options.strict,
      strict = _options$strict === void 0 ? true : _options$strict,
      _options$errorMessage = _options.errorMessage,
      errorMessage = _options$errorMessage === void 0 ? 'useContext must be inside a Provider with a value' : _options$errorMessage,
      name = _options.name;
  var Context = React.createContext(undefined);
  Context.displayName = name;

  function useContext() {
    var context = React.useContext(Context);

    if (!context && strict) {
      throw new Error(errorMessage);
    }

    return context;
  }

  return [Context.Provider, useContext, Context];
}

function useDebounce(func, waitMilliseconds, options) {
  if (waitMilliseconds === void 0) {
    waitMilliseconds = 50;
  }

  if (options === void 0) {
    options = {
      isImmediate: false
    };
  }

  var timeoutIdRef = React.useRef();
  return function () {
    var _this = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (timeoutIdRef.current) {
      clearTimeout(timeoutIdRef.current);
    }

    var doLater = function doLater() {
      timeoutIdRef.current = undefined;

      if (!options.isImmediate) {
        func.apply(_this, args);
      }
    };

    var shouldCallNow = options.isImmediate && timeoutIdRef.current === undefined;
    timeoutIdRef.current = setTimeout(doLater, waitMilliseconds);

    if (shouldCallNow) {
      func.apply(this, args);
    }
  };
}

function callAllHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function (event) {
    fns.some(function (fn) {
      if (fn) {
        fn(event);
      }

      return event && event.defaultPrevented;
    });
  };
}

function isSSR() {
  return typeof window === 'undefined';
}

function clamp(input, min, max) {
  if (input === void 0) {
    input = 0;
  }

  if (min === void 0) {
    min = 0;
  }

  if (max === void 0) {
    max = 255;
  }

  return Math.min(Math.max(input, min), max);
}
function closest(target, values) {
  var match = values.reduce(function (prev, value) {
    return Math.abs(value - target) < Math.abs(prev - target) ? value : prev;
  });
  return [values.indexOf(match), match];
}
function getDecimalPlaces(value) {
  var match = /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/.exec(value.toString());

  if (!match) {
    return 0;
  }

  return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
}
function round(input, places) {
  return parseFloat(input.toFixed(places));
}
function roundToStep(input, step) {
  var places = getDecimalPlaces(step);
  return round(Math.round(input / step) * step, places);
}
function formatNumber(input, options) {
  var _ref = options != null ? options : {},
      _ref$neutral = _ref.neutral,
      neutral = _ref$neutral === void 0 ? true : _ref$neutral,
      _ref$language = _ref.language,
      language = _ref$language === void 0 ? !isSSR() ? navigator.language : 'en-US' : _ref$language,
      rest = _objectWithoutPropertiesLoose(_ref, ["neutral", "language"]);

  if (!isNumber(input)) {
    return input;
  }

  return new Intl.NumberFormat(neutral ? language.split('-')[0] : language, rest).format(input);
}
function formatPrice(input, options) {
  var price = input;

  var format = function format(val) {
    var value = Number(val);

    if (!isNumber(value)) {
      return input.toString();
    }

    return formatNumber(value, _extends({
      style: 'currency'
    }, options));
  };

  if (!Array.isArray(price)) {
    return format(price);
  }

  var prices = price.map(Number);
  var min = Math.min.apply(Math, prices);
  var max = Math.max.apply(Math, prices);

  if (min === max) {
    return format(min);
  }

  return format(min) + "\u2013" + format(max);
}

function filterObject(input, keys, invert) {
  if (invert === void 0) {
    invert = false;
  }

  return Object.keys(input).filter(function (key) {
    return invert ? !keys.includes(key) : keys.includes(key);
  }).reduce(function (obj, key) {
    var _Object$assign;

    return Object.assign(obj, (_Object$assign = {}, _Object$assign[key] = input[key], _Object$assign));
  }, {});
}
var MergeOptions = function MergeOptions(options) {
  var _options$arrayHandlin;

  this.arrayHandling = (_options$arrayHandlin = options == null ? void 0 : options.arrayHandling) != null ? _options$arrayHandlin : 'concat';
};
function merge(options, target) {
  for (var _len = arguments.length, sources = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    sources[_key - 2] = arguments[_key];
  }

  if (isPlainObject(options)) {
    sources = [target].concat(sources);
    target = options;
    options = new MergeOptions();
  }

  if (!isPlainObject(target) || !sources.length) {
    return target;
  }

  var _options = options,
      arrayHandling = _options.arrayHandling;
  var source = sources.shift();

  if (!source || !isPlainObject(source)) {
    return target;
  }

  Object.keys(source).forEach(function (key) {
    var targetValue = target[key];
    var sourceValue = source[key];

    if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {
      switch (arrayHandling) {
        case 'concat':
          target[key] = targetValue.concat(sourceValue);
          break;

        case 'replace':
          target[key] = sourceValue;
          break;

        case 'union':
          target[key] = Array.from(new Set([].concat(targetValue, sourceValue)));
          break;
      }
    } else if (isPlainObject(targetValue) && isPlainObject(sourceValue)) {
      target[key] = merge(options, _extends({}, targetValue), sourceValue);
    } else {
      target[key] = sourceValue;
    }
  });
  return target;
}

function setRef(ref, value) {
  if (ref === void 0) {
    ref = null;
  }

  if (!ref) {
    return;
  }

  if (typeof ref === 'function') {
    ref(value);
  } else {
    ref.current = value;
  }
}
function cleanChildren(children) {
  return React.Children.toArray(children).filter(function (child) {
    return React.isValidElement(child);
  });
}
function assignRef(ref, value) {
  if (ref == null) {
    return;
  }

  try {
    setRef(ref, value);
  } catch (error) {
    throw new Error('Cannot assign value to ref');
  }
}
function mergeRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }

  return function (value) {
    refs.forEach(function (ref) {
      return ref && assignRef(ref, value);
    });
  };
}
function forwardRefWithAs(component) {
  return React__default.forwardRef(component);
}

function replaceAll(target, search, replacement) {
  if (isString(search)) {
    return target.split(search).join(replacement);
  }

  return Object.entries(search).reduce(function (current, _ref) {
    var find = _ref[0],
        replace = _ref[1];
    return replaceAll(current, find, replace);
  }, target);
}
function decodeHTML(input) {
  if (input === void 0) {
    input = '';
  }

  if (isSSR()) {
    return input;
  }

  var txt = document.createElement('textarea');
  txt.innerHTML = input;
  return txt.value;
}
function pluralize(input, singular, plural) {
  if (input === 1) {
    return singular;
  }

  return plural;
}

var tailwind_config = {
  theme: {
    backdropFilter: {
      none: 'none',
      'blur-1': 'blur(0.25rem)',
      'blur-2': 'blur(0.5rem)',
      'blur-3': 'blur(0.75rem)',
      'blur-4': 'blur(1rem)',
      'blur-5': 'blur(1.25rem)',
      'blur-6': 'blur(1.5rem)'
    },
    truncate: {
      lines: {
        2: '2',
        3: '3',
        4: '4',
        5: '5'
      }
    },
    extend: {
      backgroundOpacity: {
        95: 0.95
      },
      borderRadius: {
        inherit: 'inherit'
      },
      boxShadow: {
        menu: 'inset 0 0 0 1px rgba(0, 0, 0, 0.1), 0 1px 5px rgba(0, 0, 0, 0.1), inset 0 -1px 0 rgba(0, 0, 0, 0.1)'
      },
      fontSize: {
        'code-inline': '0.9375em'
      },
      fontFamily: {
        inherit: 'inherit'
      },
      lineHeight: {
        inherit: 'inherit'
      },
      maxWidth: {
        '7xl': '80rem',
        'screen-2xl': '1536px'
      },
      minWidth: {
        'max-content': 'max-content'
      },
      spacing: {
        '(screen-8)': 'calc(100vh - 2rem)',
        '(screen-12)': 'calc(100vh - 3rem)',
        '(screen-16)': 'calc(100vh - 4rem)',
        '(screen-20)': 'calc(100vh - 5rem)'
      }
    }
  },
  plugins: [/*#__PURE__*/require('@tailwindcss/ui'), /*#__PURE__*/require('tailwindcss-filters'), /*#__PURE__*/require('tailwindcss-truncate-multiline')()]
};

var disablePrefix = ['letter-spacing'];
var cache = /*#__PURE__*/createCache({
  stylisPlugins: function stylisPlugins(context, content, selectors) {
    var selector = selectors[0];

    switch (context) {
      case 1:
        return content + " !important";

      case 3:
        if (selector === '@font-face' || selector.startsWith('@') && selector.includes('keyframes')) {
          return replaceAll(content, ' !important', '');
        }

        return content;

      default:
        return content;
    }
  },
  prefix: function prefix(key) {
    return !disablePrefix.includes(key);
  }
});

var defaultTheme = {
  color: {
    primary: {
      base: /*#__PURE__*/"#667eea".toString(),
      text: /*#__PURE__*/"#fff".toString(),
      active: /*#__PURE__*/"#5a67d8".toString()
    }
  }
};
var useTheme = function useTheme() {
  var theme = emotionTheming.useTheme();
  return merge(_extends({}, defaultTheme), theme);
};

var ThemeProvider = function ThemeProvider(_ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme,
      _ref$importantStyles = _ref.importantStyles,
      importantStyles = _ref$importantStyles === void 0 ? false : _ref$importantStyles,
      children = _ref.children;
  return React.createElement(emotionTheming.ThemeProvider, {
    theme: merge(_extends({}, defaultTheme), theme)
  }, importantStyles ? React.createElement(core.CacheProvider, {
    value: cache
  }, children) : children);
};

function mapStyles(styles) {
  return Object.entries(styles).reduce(function (obj, _ref) {
    var _Object$assign;

    var key = _ref[0],
        value = _ref[1];
    return Object.assign(obj, (_Object$assign = {}, _Object$assign[key] = core.css(value), _Object$assign));
  }, {});
}
function getStylesObject(styles, disableDefaultStyles) {
  if (disableDefaultStyles) {
    return {};
  }

  return styles;
}
function inferStylesObjectKeys(obj) {
  return obj;
}
function filterProps(props) {
  if (isNullOrUndefined(props)) {
    return {};
  }

  return Object.entries(props).reduce(function (current, _ref2) {
    var key = _ref2[0],
        value = _ref2[1];

    if (isPropValid(key)) {
      var _extends2;

      return _extends({}, current, (_extends2 = {}, _extends2[key] = value, _extends2));
    }

    return current;
  }, {});
}

var noop = function noop() {};

exports.MergeOptions = MergeOptions;
exports.ThemeProvider = ThemeProvider;
exports.__DEV__ = __DEV__;
exports.assignRef = assignRef;
exports.callAllHandlers = callAllHandlers;
exports.clamp = clamp;
exports.cleanChildren = cleanChildren;
exports.closest = closest;
exports.createContext = createContext;
exports.decodeHTML = decodeHTML;
exports.filterObject = filterObject;
exports.filterProps = filterProps;
exports.formatNumber = formatNumber;
exports.formatPrice = formatPrice;
exports.forwardRefWithAs = forwardRefWithAs;
exports.getDecimalPlaces = getDecimalPlaces;
exports.getStylesObject = getStylesObject;
exports.groupBy = groupBy;
exports.inferStylesObjectKeys = inferStylesObjectKeys;
exports.isArray = isArray;
exports.isBoolean = isBoolean;
exports.isEmpty = isEmpty;
exports.isEmptyArray = isEmptyArray;
exports.isEmptyObject = isEmptyObject;
exports.isFunction = isFunction;
exports.isNullOrUndefined = isNullOrUndefined;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isPlainObject = isPlainObject;
exports.isSSR = isSSR;
exports.isString = isString;
exports.isValidURL = isValidURL;
exports.mapStyles = mapStyles;
exports.merge = merge;
exports.mergeRefs = mergeRefs;
exports.noop = noop;
exports.pluralize = pluralize;
exports.replaceAll = replaceAll;
exports.round = round;
exports.roundToStep = roundToStep;
exports.setRef = setRef;
exports.styled = styled;
exports.tailwindConfig = tailwind_config;
exports.useDebounce = useDebounce;
exports.useTheme = useTheme;
//# sourceMappingURL=react-sdk-utils.cjs.development.js.map
