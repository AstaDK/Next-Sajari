import { useRef } from 'react';

function useDebounce(func, waitMilliseconds, options) {
  if (waitMilliseconds === void 0) {
    waitMilliseconds = 50;
  }

  if (options === void 0) {
    options = {
      isImmediate: false
    };
  }

  var timeoutIdRef = useRef();
  return function () {
    var _this = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (timeoutIdRef.current) {
      clearTimeout(timeoutIdRef.current);
    }

    var doLater = function doLater() {
      timeoutIdRef.current = undefined;

      if (!options.isImmediate) {
        func.apply(_this, args);
      }
    };

    var shouldCallNow = options.isImmediate && timeoutIdRef.current === undefined;
    timeoutIdRef.current = setTimeout(doLater, waitMilliseconds);

    if (shouldCallNow) {
      func.apply(this, args);
    }
  };
}

export { useDebounce };
//# sourceMappingURL=debounce.esm.js.map
