import { parseURL } from './url.esm.js';

var getTag = function getTag(value) {
  if (value == null) {
    return value === undefined ? '[object Undefined]' : '[object Null]';
  }

  return toString.call(value);
};

function isNullOrUndefined(value) {
  return value === null || typeof value === 'undefined';
}
function isString(value) {
  return typeof value === 'string';
}
function isBoolean(value) {
  return typeof value === 'boolean';
}
function isNumber(value) {
  return typeof value === 'number' && !Number.isNaN(value);
}
function isFunction(value) {
  return typeof value === 'function';
}
function isArray(value) {
  return Array.isArray(value);
}
var isObject = function isObject(value) {
  var type = typeof value;
  return value !== null && (type === 'object' || type === 'function') && !isArray(value);
};
var isPlainObject = function isPlainObject(value) {
  if (!isObject(value) || getTag(value) !== '[object Object]') {
    return false;
  }

  if (Object.getPrototypeOf(value) === null) {
    return true;
  }

  var proto = value;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(value) === proto;
};
var isEmptyArray = function isEmptyArray(value) {
  return isArray(value) && value.length === 0;
};
var isEmptyObject = function isEmptyObject(value) {
  return isObject(value) && Object.keys(value).length === 0;
};
var isEmpty = function isEmpty(value) {
  if (isNullOrUndefined(value)) {
    return true;
  }

  if (isArray(value)) {
    return isEmptyArray(value);
  }

  if (isObject(value)) {
    return isEmptyObject(value);
  }

  if (isString(value)) {
    return value.trim() === '';
  }

  return false;
};
function isValidURL(value, allowRelative) {
  if (allowRelative === void 0) {
    allowRelative = false;
  }

  if (!value || isEmpty(value)) {
    return false;
  }

  if (allowRelative && value.startsWith('/')) {
    return true;
  }

  return parseURL(value) !== null;
}

export { isArray, isBoolean, isEmpty, isEmptyArray, isEmptyObject, isFunction, isNullOrUndefined, isNumber, isObject, isPlainObject, isString, isValidURL };
//# sourceMappingURL=assertion.esm.js.map
