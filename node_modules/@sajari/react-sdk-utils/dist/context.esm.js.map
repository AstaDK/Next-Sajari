{"version":3,"file":"context.esm.js","sources":["../src/context.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n\ninterface CreateContextOptions {\n  /** If `true`, React will throw if context is `null` or `undefined`.\n      In some cases, you might want to support nested context, so you can set it to `false` */\n  strict?: boolean;\n  /** Error message to throw if the context is `undefined` */\n  errorMessage?: string;\n  /** The display name of the context */\n  name?: string;\n}\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport default function createContext<ContextType>(\n  options: CreateContextOptions = {},\n): CreateContextReturn<ContextType> {\n  const { strict = true, errorMessage = 'useContext must be inside a Provider with a value', name } = options;\n  const Context = React.createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useContext() {\n    const context = React.useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context] as CreateContextReturn<ContextType>;\n}\n"],"names":["createContext","options","strict","errorMessage","name","Context","React","undefined","displayName","useContext","context","Error","Provider"],"mappings":";;SAmBwBA,cACtBC;MAAAA;AAAAA,IAAAA,UAAgC;;;iBAEoEA;iCAA5FC;MAAAA,sCAAS;uCAAMC;MAAAA,kDAAe;MAAqDC,gBAAAA;AAC3F,MAAMC,OAAO,GAAGC,eAAA,CAA6CC,SAA7C,CAAhB;AAEAF,EAAAA,OAAO,CAACG,WAAR,GAAsBJ,IAAtB;;AAEA,WAASK,YAAT;AACE,QAAMC,OAAO,GAAGJ,UAAA,CAAiBD,OAAjB,CAAhB;;AACA,QAAI,CAACK,OAAD,IAAYR,MAAhB,EAAwB;AACtB,YAAM,IAAIS,KAAJ,CAAUR,YAAV,CAAN;AACD;;AACD,WAAOO,OAAP;AACD;;AAED,SAAO,CAACL,OAAO,CAACO,QAAT,EAAmBH,YAAnB,EAA+BJ,OAA/B,CAAP;AACD;;;;"}