{"version":3,"file":"index.esm.js","sources":["../../src/RadioGroup/index.tsx"],"sourcesContent":["import { useId } from '@react-aria/utils';\nimport { cleanChildren, getStylesObject } from '@sajari/react-sdk-utils';\nimport React, { cloneElement, forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport tw from 'twin.macro';\n\nimport Box from '../Box';\nimport Text from '../Text';\nimport useRadioGroupStyles from './styles';\nimport { RadioGroupProps } from './types';\n\nconst RadioGroup = forwardRef((props: RadioGroupProps, ref) => {\n  const {\n    onChange,\n    name,\n    label = name,\n    defaultValue,\n    value: valueProp,\n    inline,\n    children,\n    styles: stylesProp,\n    disableDefaultStyles = false,\n    'aria-labelledby': ariaLabelledBy,\n    ...rest\n  } = props;\n  const { current: controlled } = useRef(typeof valueProp !== 'undefined');\n  const [value, setValue] = useState(defaultValue || null);\n  const internalValue = controlled ? valueProp : value;\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const styles = getStylesObject(useRadioGroupStyles(props), disableDefaultStyles);\n\n  const internalOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!controlled) {\n      setValue(event.target.value);\n    }\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  // If no name is passed, we'll generate a random, unique name\n  const fallbackName = `radio-${useId()}`;\n  const internalName = name || fallbackName;\n  const validChildren = cleanChildren(children);\n\n  const clones = validChildren.map((child, index) => {\n    const checked = child.props.value === internalValue;\n\n    // TODO: Handle if the child isn't a Radio since this assumes it will be\n    return cloneElement(child, {\n      key: `${internalName}-${index}`,\n      name: internalName,\n      onChange: internalOnChange,\n      checked,\n      disableDefaultStyles,\n    });\n  });\n\n  const labelId = label ? `group-label-${useId()}` : undefined;\n\n  // Calling focus() on the radiogroup should focus on the selected option or first enabled option\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: () => {\n        let input = rootRef?.current?.querySelector<HTMLDivElement>('input:not(:disabled):checked');\n\n        if (!input) {\n          input = rootRef?.current?.querySelector('input:not(:disabled)');\n        }\n\n        if (input) {\n          input.focus();\n        }\n      },\n    }),\n    [],\n  );\n\n  return (\n    <Box\n      {...rest}\n      ref={rootRef}\n      role=\"radiogroup\"\n      aria-labelledby={ariaLabelledBy ?? labelId}\n      css={[styles.container, stylesProp]}\n    >\n      {label && !ariaLabelledBy && (\n        <Text id={labelId} css={tw`sr-only`}>\n          {label}\n        </Text>\n      )}\n\n      {clones}\n    </Box>\n  );\n});\n\nRadioGroup.displayName = 'RadioGroup';\n\nexport default RadioGroup;\nexport type { RadioGroupProps };\n"],"names":["RadioGroup","forwardRef","props","ref","onChange","name","label","defaultValue","valueProp","value","children","stylesProp","styles","disableDefaultStyles","ariaLabelledBy","rest","useRef","controlled","current","useState","setValue","internalValue","rootRef","getStylesObject","useRadioGroupStyles","internalOnChange","event","target","fallbackName","useId","internalName","validChildren","cleanChildren","clones","map","child","index","checked","cloneElement","key","labelId","undefined","useImperativeHandle","focus","input","querySelector","_jsxs","container","_jsx","displayName"],"mappings":"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"}