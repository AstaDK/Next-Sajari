import { mapStyles, inferStylesObjectKeys } from '@sajari/react-sdk-utils';
import '../../../hooks/useBorderRadius.esm.js';
import { useDropdownItemStyles as useDropdownItemStyles$1 } from '../../../hooks/useDropdownItemStyles.esm.js';
import '../../../hooks/useDropdownStyles.esm.js';
import '../../../hooks/useFirstRender.esm.js';
import '../../../hooks/useRingStyles.esm.js';
import '../../../hooks/useFocusRingStyles.esm.js';
import '../../../hooks/useFontSize.esm.js';
import '../../../hooks/useInputStyles.esm.js';
import '../../../hooks/useJustifyContent.esm.js';
import '../../../hooks/useSpacing.esm.js';
import '../../../hooks/useVoiceInput.esm.js';
import 'use-resize-observer/polyfilled';

function useDropdownItemStyles(props) {
  var selected = props.selected;

  var _useCoreDropdownItemS = useDropdownItemStyles$1({
    highlighted: selected
  }),
      root = _useCoreDropdownItemS.root,
      label = _useCoreDropdownItemS.label;

  var styles = inferStylesObjectKeys({
    item: [root],
    highlight: [{
      "fontWeight": "600"
    }],
    label: [label, {
      "display": "flex",
      "alignItems": "center",
      "transitionProperty": "opacity",
      "transitionDuration": "75ms"
    }],
    iconEnter: [{
      "marginLeft": "0.5rem"
    }]
  });

  if (selected) {
    styles.label.push({
      "opacity": "1"
    });
  } else {
    styles.highlight.push({
      "--text-opacity": "1",
      "color": "rgba(22, 30, 46, var(--text-opacity))"
    });
    styles.label.push({
      "opacity": "0"
    });
  }

  return mapStyles(styles);
}

export { useDropdownItemStyles };
//# sourceMappingURL=styles.esm.js.map
