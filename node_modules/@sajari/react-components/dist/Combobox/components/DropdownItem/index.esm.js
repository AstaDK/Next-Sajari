import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { getStylesObject } from '@sajari/react-sdk-utils';
import { Fragment } from 'react';
import { jsx, jsxs } from '@emotion/core/jsx-runtime';
import Box from '../../../Box/index.esm.js';
import { createElement } from '@emotion/core';
import classnames from 'classnames';
import '../../../assets/icons/check.esm.js';
import '../../../assets/icons/chevron-left.esm.js';
import '../../../assets/icons/chevron-right.esm.js';
import '../../../assets/icons/down-key.esm.js';
import '../../../assets/icons/empty-mic.esm.js';
import IconEnterKey from '../../../assets/icons/enter-key.esm.js';
import '../../../assets/icons/mic.esm.js';
import '../../../assets/icons/search.esm.js';
import '../../../assets/icons/small-check.esm.js';
import '../../../assets/icons/small-search.esm.js';
import '../../../assets/icons/small-star.esm.js';
import '../../../assets/icons/spinner.esm.js';
import '../../../assets/icons/up-key.esm.js';
import '../../../assets/icons/close.esm.js';
import { useComboboxContext } from '../../context.esm.js';
import { useDropdownItemStyles } from './styles.esm.js';

var DropdownItem = function DropdownItem(props) {
  var _classnames;

  var value = props.value,
      index = props.index,
      selected = props.selected,
      highlight = props.highlight,
      rest = _objectWithoutPropertiesLoose(props, ["value", "index", "selected", "highlight"]);

  var _useComboboxContext = useComboboxContext(),
      typedInputValue = _useComboboxContext.typedInputValue,
      getItemProps = _useComboboxContext.getItemProps,
      showDropdownTips = _useComboboxContext.showDropdownTips,
      itemToString = _useComboboxContext.itemToString,
      onSelect = _useComboboxContext.onSelect,
      _useComboboxContext$d = _useComboboxContext.disableDefaultStyles,
      disableDefaultStyles = _useComboboxContext$d === void 0 ? false : _useComboboxContext$d,
      _useComboboxContext$c = _useComboboxContext.customClassNames,
      _useComboboxContext$c2 = _useComboboxContext$c.dropdownItemClassName,
      dropdownItemClassName = _useComboboxContext$c2 === void 0 ? '' : _useComboboxContext$c2,
      _useComboboxContext$c3 = _useComboboxContext$c.dropdownSelectedItemClassName,
      dropdownSelectedItemClassName = _useComboboxContext$c3 === void 0 ? '' : _useComboboxContext$c3,
      _useComboboxContext$c4 = _useComboboxContext$c.dropdownHighlightItemClassName,
      dropdownHighlightItemClassName = _useComboboxContext$c4 === void 0 ? '' : _useComboboxContext$c4;

  var stringItem = itemToString(value);
  var styles = getStylesObject(useDropdownItemStyles(props), disableDefaultStyles);

  var renderContent = function renderContent() {
    if (typedInputValue && stringItem.startsWith(typedInputValue)) {
      return jsxs(Fragment, {
        children: [typedInputValue, jsx(Box, {
          as: "span",
          css: styles.highlight,
          children: stringItem.replace(typedInputValue, '')
        })]
      });
    }

    return stringItem;
  };

  return createElement(Box, _extends({
    as: "li"
  }, getItemProps({
    index: index,
    item: value,
    onClick: function onClick() {
      if (onSelect) {
        onSelect(value);
      }
    }
  }), {
    key: stringItem + "_" + index,
    css: styles.item,
    className: classnames(dropdownItemClassName, (_classnames = {}, _classnames[dropdownSelectedItemClassName] = selected, _classnames[dropdownHighlightItemClassName] = highlight, _classnames))
  }, rest), jsx(Box, {
    as: "span",
    children: renderContent()
  }), showDropdownTips && jsxs(Box, {
    as: "span",
    css: styles.label,
    children: ["Select", jsx(IconEnterKey, {
      css: styles.iconEnter
    })]
  }));
};

export default DropdownItem;
//# sourceMappingURL=index.esm.js.map
