import { extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { getStylesObject } from '@sajari/react-sdk-utils';
import { Fragment } from 'react';
import { jsx, jsxs } from '@emotion/core/jsx-runtime';
import Box from '../../../Box/index.esm.js';
import '../../../hooks/useBorderRadius.esm.js';
import '../../../hooks/useDropdownItemStyles.esm.js';
import { useDropdownStyles } from '../../../hooks/useDropdownStyles.esm.js';
import '../../../hooks/useFirstRender.esm.js';
import '../../../hooks/useRingStyles.esm.js';
import '../../../hooks/useFocusRingStyles.esm.js';
import '../../../hooks/useFontSize.esm.js';
import '../../../hooks/useInputStyles.esm.js';
import '../../../hooks/useJustifyContent.esm.js';
import '../../../hooks/useSpacing.esm.js';
import '../../../hooks/useVoiceInput.esm.js';
import 'use-resize-observer/polyfilled';
import Text from '../../../Text/index.esm.js';
import '../../../assets/icons/check.esm.js';
import '../../../assets/icons/chevron-left.esm.js';
import '../../../assets/icons/chevron-right.esm.js';
import IconDownKey from '../../../assets/icons/down-key.esm.js';
import '../../../assets/icons/empty-mic.esm.js';
import IconEnterKey from '../../../assets/icons/enter-key.esm.js';
import '../../../assets/icons/mic.esm.js';
import '../../../assets/icons/search.esm.js';
import '../../../assets/icons/small-check.esm.js';
import '../../../assets/icons/small-search.esm.js';
import '../../../assets/icons/small-star.esm.js';
import '../../../assets/icons/spinner.esm.js';
import IconUpKey from '../../../assets/icons/up-key.esm.js';
import '../../../assets/icons/close.esm.js';
import PoweredBy from '../../../PoweredBy/index.esm.js';
import { useComboboxContext } from '../../context.esm.js';
import DropdownItem from '../DropdownItem/index.esm.js';
import DropdownResult from '../DropdownResult/index.esm.js';

var Dropdown = function Dropdown() {
  var _useComboboxContext = useComboboxContext(),
      mode = _useComboboxContext.mode,
      open = _useComboboxContext.open,
      _useComboboxContext$i = _useComboboxContext.items,
      items = _useComboboxContext$i === void 0 ? [] : _useComboboxContext$i,
      inputValue = _useComboboxContext.inputValue,
      highlightedIndex = _useComboboxContext.highlightedIndex,
      getMenuProps = _useComboboxContext.getMenuProps,
      showDropdownTips = _useComboboxContext.showDropdownTips,
      showPoweredBy = _useComboboxContext.showPoweredBy,
      renderItem = _useComboboxContext.renderItem,
      itemToString = _useComboboxContext.itemToString,
      getItemProps = _useComboboxContext.getItemProps,
      _useComboboxContext$d = _useComboboxContext.disableDefaultStyles,
      disableDefaultStyles = _useComboboxContext$d === void 0 ? false : _useComboboxContext$d,
      _useComboboxContext$c = _useComboboxContext.customClassNames,
      dropdownClassName = _useComboboxContext$c.dropdownClassName,
      dropdownListClassName = _useComboboxContext$c.dropdownListClassName,
      dropdownFooterClassName = _useComboboxContext$c.dropdownFooterClassName;

  var shown = (mode === 'results' || mode === 'suggestions') && open && items.length > 0;
  var styles = getStylesObject(useDropdownStyles({
    shown: shown
  }), disableDefaultStyles);
  var label = mode === 'results' ? 'Results' : 'Suggestions';
  var listRender = null;

  if (renderItem) {
    listRender = items.map(function (item, index) {
      var selected = highlightedIndex === index;
      var stringItem = itemToString(item);
      var highlight = inputValue.length > 0 && stringItem.startsWith(inputValue);
      return jsx(Fragment, {
        children: renderItem({
          item: item,
          highlight: highlight,
          selected: selected,
          getItemProps: getItemProps,
          index: index
        })
      }, stringItem + "-" + index);
    });
  } else if (mode === 'results') {
    listRender = items.map(function (item, index) {
      var selected = highlightedIndex === index;
      return jsx(DropdownResult, {
        value: item,
        selected: selected,
        index: index
      }, item.title + "-" + index);
    });
  } else {
    listRender = items.map(function (item, index) {
      var selected = highlightedIndex === index;
      var stringItem = itemToString(item);
      var highlight = inputValue.length > 0 && stringItem.startsWith(inputValue);
      return jsx(DropdownItem, {
        value: item,
        highlight: highlight,
        selected: selected,
        index: index
      }, stringItem + "-" + index);
    });
  }

  return jsxs(Box, {
    css: styles.container,
    className: dropdownClassName,
    children: [jsx(Text, {
      as: "h6",
      css: styles.heading,
      children: label
    }), jsx("ul", _extends({}, getMenuProps(), {
      css: styles.items,
      className: dropdownListClassName,
      children: listRender
    })), (showDropdownTips || showPoweredBy) && jsxs(Box, {
      as: "footer",
      css: styles.footer,
      className: dropdownFooterClassName,
      children: [showDropdownTips && jsxs(Box, {
        as: "span",
        css: styles.footerItems,
        children: [jsxs(Box, {
          as: "span",
          css: styles.footerItem,
          children: [jsx(IconUpKey, {
            css: styles.footerIcon
          }), jsx(IconDownKey, {
            css: styles.footerIcon
          }), "to navigate"]
        }), jsxs(Box, {
          as: "span",
          css: styles.footerItem,
          children: [jsx(IconEnterKey, {
            css: styles.footerIcon
          }), "to select"]
        }), jsxs(Box, {
          as: "span",
          css: styles.footerItem,
          children: [jsx(Box, {
            as: "span",
            css: styles.footerEscHint,
            children: "esc"
          }), "to dismiss"]
        })]
      }), showPoweredBy && jsx(PoweredBy, {
        css: styles.poweredBy
      })]
    })]
  });
};

export default Dropdown;
//# sourceMappingURL=index.esm.js.map
