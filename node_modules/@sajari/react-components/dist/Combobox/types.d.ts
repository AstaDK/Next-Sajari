import { UseComboboxReturnValue } from 'downshift';
import * as React from 'react';
import { BoxProps } from '../Box';
export declare type ComboboxMode = 'standard' | 'typeahead' | 'suggestions' | 'results';
export interface ResultItem {
    title: string;
    url?: string;
    description?: string;
    image?: string;
    onClick?: () => void;
}
export interface ComboboxCustomClassNames {
    inputContainerClassName?: string;
    inputClassName?: string;
    voiceInputClassName?: string;
    dropdownClassName?: string;
    dropdownItemClassName?: string;
    dropdownSelectedItemClassName?: string;
    dropdownHighlightItemClassName?: string;
    dropdownListClassName?: string;
    dropdownFooterClassName?: string;
    resultClassName?: string;
    resultImageContainerClassName?: string;
    resultTextContainerClassName?: string;
    selectedResultClassName?: string;
    typeaheadClassName?: string;
}
interface Props<T> {
    mode?: ComboboxMode;
    invalid?: boolean;
    label?: string;
    enterKeyHint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
    onVoiceInput?: (text: string) => void;
    enableVoice?: boolean;
    captureVoiceInput?: boolean;
    loading?: boolean;
    items?: T[];
    onChange?: (value?: string) => void;
    onSelect?: (item: T) => void;
    completion?: string;
    size?: 'sm' | 'md' | 'lg';
    showDropdownTips?: boolean;
    showPoweredBy?: boolean;
    itemToString?: (item: T) => string;
    itemToUrl?: (item: T) => string;
    renderItem?: (params: {
        item: T;
        highlight: boolean;
        index: number;
        selected: boolean;
        getItemProps: UseComboboxReturnValue<T>['getItemProps'];
    }) => React.ReactNode;
    inputElement?: React.RefObject<HTMLInputElement>;
}
declare type HtmlAttributes = Omit<React.InputHTMLAttributes<HTMLInputElement>, keyof Props<any>>;
export interface ComboboxProps<T> extends Props<T>, BoxProps, HtmlAttributes, ComboboxCustomClassNames {
}
export {};
