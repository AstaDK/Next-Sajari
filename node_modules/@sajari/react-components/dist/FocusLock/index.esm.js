import React__default from 'react';
import { jsx } from '@emotion/core/jsx-runtime';
import ReactFocusLock from 'react-focus-lock';
import { getFocusables } from './utils.esm.js';

function FocusLock(props) {
  var initialFocusRef = props.initialFocusRef,
      finalFocusRef = props.finalFocusRef,
      contentRef = props.contentRef,
      restoreFocus = props.restoreFocus,
      children = props.children,
      disabled = props.disabled,
      _props$autoFocus = props.autoFocus,
      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus;
  var onActivation = React__default.useCallback(function () {
    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {
      initialFocusRef.current.focus();
    } else {
      if (!(contentRef == null ? void 0 : contentRef.current)) {
        return;
      }

      var focusables = getFocusables(contentRef.current);

      if (contentRef.current && !focusables.length) {
        var _contentRef$current;

        (_contentRef$current = contentRef.current) == null ? void 0 : _contentRef$current.focus();
      }
    }
  }, [initialFocusRef, contentRef]);
  var onDeactivation = React__default.useCallback(function () {
    var _finalFocusRef$curren;

    finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();
  }, [finalFocusRef]);
  var returnFocus = restoreFocus && !finalFocusRef;
  return jsx(ReactFocusLock, {
    autoFocus: autoFocus,
    disabled: disabled,
    onActivation: onActivation,
    onDeactivation: onDeactivation,
    returnFocus: returnFocus,
    children: children
  });
}

export default FocusLock;
//# sourceMappingURL=index.esm.js.map
