import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';
import { getStylesObject, __DEV__ } from '@sajari/react-sdk-utils';
import { forwardRef, useState, cloneElement } from 'react';
import { jsx, jsxs, Fragment } from '@emotion/core/jsx-runtime';
import Box from '../Box/index.esm.js';
import AspectRatio from '../AspectRatio/index.esm.js';
import { useImageStyles } from './styles.esm.js';
import useImageProvider from './useImageProvider.esm.js';

var NativeImage = /*#__PURE__*/forwardRef(function (props, ref) {
  var htmlWidth = props.htmlWidth,
      htmlHeight = props.htmlHeight,
      _props$alt = props.alt,
      alt = _props$alt === void 0 ? '' : _props$alt,
      _props$loading = props.loading,
      loading = _props$loading === void 0 ? 'lazy' : _props$loading,
      rest = _objectWithoutPropertiesLoose(props, ["htmlWidth", "htmlHeight", "alt", "loading"]);

  return jsx("img", _extends({
    ref: ref,
    width: htmlWidth,
    height: htmlHeight,
    alt: alt,
    loading: loading
  }, rest));
});
var Image = /*#__PURE__*/forwardRef(function (props, ref) {
  var srcProp = props.src,
      hoverSrcProp = props.hoverSrc,
      onError = props.onError,
      onLoad = props.onLoad,
      onMouseEnterExternal = props.onMouseEnter,
      onMouseLeaveExternal = props.onMouseLeave,
      htmlWidth = props.htmlWidth,
      htmlHeight = props.htmlHeight,
      aspectRatio = props.aspectRatio,
      containerClassName = props.containerClassName,
      _props$disableDefault = props.disableDefaultStyles,
      disableDefaultStyles = _props$disableDefault === void 0 ? false : _props$disableDefault,
      width = props.width,
      height = props.height,
      provider = props.provider,
      rest = _objectWithoutPropertiesLoose(props, ["src", "hoverSrc", "onError", "onLoad", "onMouseEnter", "onMouseLeave", "htmlWidth", "htmlHeight", "aspectRatio", "objectFit", "className", "containerClassName", "disableDefaultStyles", "width", "height", "provider"]);

  var _React$useState = useState(false),
      hover = _React$useState[0],
      setHover = _React$useState[1];

  var _useImageProvider = useImageProvider({
    provider: provider,
    images: [srcProp, hoverSrcProp],
    width: width,
    height: height
  }),
      src = _useImageProvider[0],
      hoverSrc = _useImageProvider[1];

  var onMouseEnter = function onMouseEnter(e) {
    if (hoverSrc) {
      setHover(true);
    }

    onMouseEnterExternal == null ? void 0 : onMouseEnterExternal(e);
  };

  var onMouseLeave = function onMouseLeave(e) {
    if (hoverSrc) {
      setHover(false);
    }

    onMouseLeaveExternal == null ? void 0 : onMouseLeaveExternal(e);
  };

  var imageProps = {
    src: src,
    onLoad: onLoad,
    onError: onError,
    htmlWidth: htmlWidth,
    htmlHeight: htmlHeight,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  };
  var styles = getStylesObject(useImageStyles(_extends({}, props, {
    hover: hover
  })), disableDefaultStyles);

  var image = jsx(Box, _extends({
    as: NativeImage,
    ref: ref,
    css: styles.image
  }, imageProps, rest));

  var secondImage = /*#__PURE__*/cloneElement(image, {
    src: hoverSrc,
    css: styles.secondImage
  });
  return jsx(AspectRatio, {
    ratio: aspectRatio != null ? aspectRatio : null,
    css: styles.container,
    className: containerClassName,
    children: jsxs(Fragment, {
      children: [src ? image : null, hoverSrc ? secondImage : null]
    })
  });
});

if (__DEV__) {
  Image.displayName = 'Image';
}

export default Image;
//# sourceMappingURL=index.esm.js.map
