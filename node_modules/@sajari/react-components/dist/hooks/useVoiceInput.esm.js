import { isSSR } from '@sajari/react-sdk-utils';
import { useState, useRef, useEffect, useCallback } from 'react';

function useVoiceInput(onResult) {
  var _useState = useState(false),
      supported = _useState[0],
      setSupported = _useState[1];

  var _useState2 = useState(false),
      active = _useState2[0],
      setActive = _useState2[1];

  var _useState3 = useState(''),
      result = _useState3[0],
      setResult = _useState3[1];

  var recognitionRef = useRef();
  useEffect(function () {
    if (isSSR()) {
      return;
    }

    if (window.hasOwnProperty('SpeechRecognition')) {
      setSupported('native');
    } else if (window.hasOwnProperty('webkitSpeechRecognition')) {
      setSupported('webkit');
    }
  }, []);
  useEffect(function () {
    if (supported) {
      if (supported === 'native') {
        recognitionRef.current = new window.SpeechRecognition();
      } else {
        recognitionRef.current = new window.webkitSpeechRecognition();
      }
    }
  }, [supported]);
  var start = useCallback(function () {
    if (!supported || !recognitionRef.current) {
      return;
    }

    var recognition = recognitionRef.current;

    if (active) {
      setActive(false);
      recognition.stop();
      return;
    }

    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.start();

    recognition.onresult = function (event) {
      setActive(false);
      recognition.stop();
      var r = event.results[0][0].transcript;
      setResult(r);
      onResult == null ? void 0 : onResult(r);
    };

    recognition.onerror = function () {
      setActive(false);
      recognition.stop();
    };

    setActive(true);
  }, [active, supported, onResult]);
  return {
    supported: supported !== false,
    result: result,
    active: active,
    start: start
  };
}

export default useVoiceInput;
//# sourceMappingURL=useVoiceInput.esm.js.map
