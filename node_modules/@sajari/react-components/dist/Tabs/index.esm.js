import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';
import React__default, { useRef, useState } from 'react';
import { jsx } from '@emotion/core/jsx-runtime';
import Box from '../Box/index.esm.js';
import { useId } from '@react-aria/utils';
import TabContextProvider from './context.esm.js';
export { default as Tab } from './Tab/index.esm.js';
export { default as TabList } from './TabList/index.esm.js';
export { default as TabPanel } from './TabPanel/index.esm.js';
export { default as TabPanels } from './TabPanels/index.esm.js';

var Tabs = /*#__PURE__*/React__default.forwardRef(function (props, ref) {
  var children = props.children,
      onChange = props.onChange,
      controlledIndex = props.index,
      defaultIndex = props.defaultIndex,
      manual = props.manual,
      _props$align = props.align,
      align = _props$align === void 0 ? 'start' : _props$align,
      fitted = props.fitted,
      alwaysRenderChildren = props.alwaysRenderChildren,
      disableDefaultStyles = props.disableDefaultStyles,
      stylesProp = props.styles,
      rest = _objectWithoutPropertiesLoose(props, ["children", "onChange", "index", "defaultIndex", "manual", "align", "fitted", "alwaysRenderChildren", "disableDefaultStyles", "styles"]);

  var _useRef = useRef(typeof controlledIndex !== 'undefined'),
      controlled = _useRef.current;

  var selectedPanelRef = useRef(null);

  var getInitialIndex = function getInitialIndex() {
    if (!manual) {
      return defaultIndex || 0;
    }

    return controlledIndex || defaultIndex || 0;
  };

  var _useState = useState(getInitialIndex),
      selectedIndex = _useState[0],
      setSelectedIndex = _useState[1];

  var getActualIdx = function getActualIdx() {
    if (manual) {
      return selectedIndex;
    }

    return controlled && typeof controlledIndex === 'number' ? controlledIndex : selectedIndex;
  };

  var _useState2 = useState(controlledIndex || defaultIndex || 0),
      manualIndex = _useState2[0],
      setManualIndex = _useState2[1];

  var actualIdx = getActualIdx();
  var manualIdx = controlled ? controlledIndex : manualIndex;

  var onChangeTab = function onChangeTab(index) {
    if (!controlled) {
      setSelectedIndex(index);
    }

    if (controlled && manual) {
      setSelectedIndex(index);
    }

    if (!manual) {
      if (onChange) {
        onChange(index);
      }
    }
  };

  var onManualTabChange = function onManualTabChange(index) {
    if (!controlled) {
      setManualIndex(index);
    }

    if (manual) {
      if (onChange) {
        onChange(index);
      }
    }
  };

  var onFocusPanel = function onFocusPanel() {
    if (selectedPanelRef.current) {
      selectedPanelRef.current.focus();
    }
  };

  var id = useId();
  var context = {
    id: id,
    index: actualIdx,
    manualIndex: manualIdx,
    onManualTabChange: onManualTabChange,
    manual: manual,
    onChangeTab: onChangeTab,
    selectedPanelRef: selectedPanelRef,
    onFocusPanel: onFocusPanel,
    align: align,
    fitted: fitted,
    alwaysRenderChildren: alwaysRenderChildren,
    disableDefaultStyles: disableDefaultStyles
  };
  return jsx(TabContextProvider, {
    value: context,
    children: jsx(Box, _extends({
      ref: ref,
      css: stylesProp
    }, rest, {
      children: children
    }))
  });
});
Tabs.displayName = 'Tabs';

export default Tabs;
//# sourceMappingURL=index.esm.js.map
