import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { getStylesObject, cleanChildren, __DEV__ } from '@sajari/react-sdk-utils';
import React__default, { useRef, cloneElement } from 'react';
import { jsx } from '@emotion/core/jsx-runtime';
import Box from '../../Box/index.esm.js';
import { useTabContext } from '../context.esm.js';
import useTabListStyles from './styles.esm.js';

var TabList = /*#__PURE__*/React__default.forwardRef(function (props, ref) {
  var children = props.children,
      onKeyDown = props.onKeyDown,
      rest = _objectWithoutPropertiesLoose(props, ["children", "onKeyDown", "onClick", "styles"]);

  var _useTabContext = useTabContext(),
      id = _useTabContext.id,
      selectedIndex = _useTabContext.index,
      manualIndex = _useTabContext.manualIndex,
      onManualTabChange = _useTabContext.onManualTabChange,
      manual = _useTabContext.manual,
      onChangeTab = _useTabContext.onChangeTab,
      onFocusPanel = _useTabContext.onFocusPanel,
      _useTabContext$disabl = _useTabContext.disableDefaultStyles,
      disableDefaultStyles = _useTabContext$disabl === void 0 ? false : _useTabContext$disabl;

  var styles = getStylesObject(useTabListStyles(), disableDefaultStyles);
  var allNodes = useRef([]);
  var validChildren = cleanChildren(children);
  var focusableIndexes = validChildren.map(function (child, index) {
    return child.props.disabled === true ? null : index;
  }).filter(function (index) {
    return index != null;
  });
  var enabledSelectedIndex = focusableIndexes.indexOf(selectedIndex);
  var count = focusableIndexes.length;

  var updateIndex = function updateIndex(index) {
    var _allNodes$current$chi;

    var childIndex = focusableIndexes[index];
    (_allNodes$current$chi = allNodes.current[childIndex]) == null ? void 0 : _allNodes$current$chi.focus();

    if (onChangeTab) {
      onChangeTab(childIndex);
    }
  };

  var handleKeyDown = function handleKeyDown(event) {
    if (event.key === 'ArrowRight') {
      event.preventDefault();
      var nextIndex = (enabledSelectedIndex + 1) % count;
      updateIndex(nextIndex);
    }

    if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {
      event.preventDefault();

      var _nextIndex = (enabledSelectedIndex - 1 + count) % count;

      updateIndex(_nextIndex);
    }

    if (event.key === 'Home') {
      event.preventDefault();
      updateIndex(0);
    }

    if (event.key === 'End') {
      event.preventDefault();
      updateIndex(count - 1);
    }

    if (event.key === 'ArrowDown') {
      event.preventDefault();

      if (onFocusPanel) {
        onFocusPanel();
      }
    }

    if (onKeyDown) {
      onKeyDown(event);
    }
  };

  var clones = validChildren.map(function (child, index) {
    var selected = manual ? index === manualIndex : index === selectedIndex;

    var handleClick = function handleClick(event) {
      var _allNodes$current$ind;

      (_allNodes$current$ind = allNodes.current[index]) == null ? void 0 : _allNodes$current$ind.focus();
      onManualTabChange(index);
      onChangeTab(index);

      if (child.props.onClick) {
        child.props.onClick(event);
      }
    };

    return /*#__PURE__*/cloneElement(child, {
      ref: function ref(node) {
        allNodes.current[index] = node;
        return node;
      },
      selected: selected,
      onClick: handleClick,
      id: id + "-" + index
    });
  });
  return jsx(Box, {
    css: styles.container,
    children: jsx(Box, _extends({
      ref: ref,
      role: "tablist",
      onKeyDown: handleKeyDown,
      css: styles.innerContainer
    }, rest, {
      children: clones
    }))
  });
});

if (__DEV__) {
  TabList.displayName = 'TabList';
}

export default TabList;
//# sourceMappingURL=index.esm.js.map
