import { mapStyles } from '@sajari/react-sdk-utils';
import '../hooks/useBorderRadius.esm.js';
import '../hooks/useDropdownItemStyles.esm.js';
import '../hooks/useDropdownStyles.esm.js';
import '../hooks/useFirstRender.esm.js';
import '../hooks/useRingStyles.esm.js';
import '../hooks/useFocusRingStyles.esm.js';
import useFontSize from '../hooks/useFontSize.esm.js';
import '../hooks/useInputStyles.esm.js';
import '../hooks/useJustifyContent.esm.js';
import '../hooks/useSpacing.esm.js';
import '../hooks/useVoiceInput.esm.js';
import 'use-resize-observer/polyfilled';
import { mapTruncateValue } from '../utils/styles.esm.js';

function useHeadingStyles(options) {
  var size = options.size,
      _options$truncate = options.truncate,
      truncate = _options$truncate === void 0 ? false : _options$truncate;
  var sizeStyles = useFontSize({
    size: size
  });
  var styles = {
    container: [{
      "padding": "0",
      "margin": "0"
    }, mapTruncateValue(truncate), size === 'xs' ? {
      "--text-opacity": "1",
      "color": "rgba(159, 166, 178, var(--text-opacity))"
    } : {
      "--text-opacity": "1",
      "color": "rgba(37, 47, 63, var(--text-opacity))"
    }, sizeStyles]
  };

  if (size === 'xs') {
    styles.container.push({
      "fontWeight": "500",
      "letterSpacing": "0.025em",
      "textTransform": "uppercase"
    });
  } else {
    styles.container.push({
      "fontWeight": "600",
      "textTransform": "none"
    });
  }

  if (size !== 'xs' && size !== 'sm' && size !== 'base') {
    styles.container.push({
      "letterSpacing": "-0.025em"
    });
  }

  return mapStyles(styles);
}

export default useHeadingStyles;
//# sourceMappingURL=styles.esm.js.map
