{"version":3,"file":"modalManager.esm.js","sources":["../../src/Modal/modalManager.ts"],"sourcesContent":["import { Ref, useEffect } from 'react';\n\nlet modals: Ref<Element>[] = [];\n\n/**\n * Handle the order of the modals.\n * Inspired by the material-ui implementation.\n */\nexport const modalManager = {\n  /**\n   * Register a new modal\n   */\n  add: (newModal: Ref<Element>) => {\n    modals.push(newModal);\n  },\n\n  /**\n   * Remove a modal\n   */\n  remove: (oldModal: Ref<Element>) => {\n    modals = modals.filter((modal) => modal !== oldModal);\n  },\n\n  /**\n   * When multiple modals are rendered will return true if current modal is the last one\n   */\n  isTopModal: (modal: Ref<Element>) => !!modals.length && modals[modals.length - 1] === modal,\n};\n\nexport function useModalManager(ref: Ref<Element>, open: boolean) {\n  useEffect(() => {\n    if (open) {\n      modalManager.add(ref);\n    }\n    return () => {\n      modalManager.remove(ref);\n    };\n  }, [open, ref]);\n}\n"],"names":["modals","modalManager","add","newModal","push","remove","oldModal","filter","modal","isTopModal","length","useModalManager","ref","open","useEffect"],"mappings":";;AAEA,IAAIA,MAAM,GAAmB,EAA7B;IAMaC,YAAY,GAAG;AAI1BC,EAAAA,GAAG,EAAE,aAACC,QAAD;AACHH,IAAAA,MAAM,CAACI,IAAP,CAAYD,QAAZ;AACD,GANyB;AAW1BE,EAAAA,MAAM,EAAE,gBAACC,QAAD;AACNN,IAAAA,MAAM,GAAGA,MAAM,CAACO,MAAP,CAAc,UAACC,KAAD;AAAA,aAAWA,KAAK,KAAKF,QAArB;AAAA,KAAd,CAAT;AACD,GAbyB;AAkB1BG,EAAAA,UAAU,EAAE,oBAACD,KAAD;AAAA,WAAyB,CAAC,CAACR,MAAM,CAACU,MAAT,IAAmBV,MAAM,CAACA,MAAM,CAACU,MAAP,GAAgB,CAAjB,CAAN,KAA8BF,KAA1E;AAAA;AAlBc;SAqBZG,gBAAgBC,KAAmBC;AACjDC,EAAAA,SAAS,CAAC;AACR,QAAID,IAAJ,EAAU;AACRZ,MAAAA,YAAY,CAACC,GAAb,CAAiBU,GAAjB;AACD;;AACD,WAAO;AACLX,MAAAA,YAAY,CAACI,MAAb,CAAoBO,GAApB;AACD,KAFD;AAGD,GAPQ,EAON,CAACC,IAAD,EAAOD,GAAP,CAPM,CAAT;AAQD;;;;"}