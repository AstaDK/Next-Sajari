import { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';
import { getStylesObject, isSSR, __DEV__ } from '@sajari/react-sdk-utils';
import { useRef, useState, useEffect } from 'react';
import { jsx, jsxs } from '@emotion/core/jsx-runtime';
import Box from '../Box/index.esm.js';
import classnames from 'classnames';
import FocusLock from '../FocusLock/index.esm.js';
import { AriaHidden } from './AriaHidden.esm.js';
import ModalContextProvider from './context.esm.js';
export { default as ModalBody } from './ModalBody/index.esm.js';
export { default as ModalCloseButton } from './ModalCloseButton/index.esm.js';
export { default as ModalFooter } from './ModalFooter/index.esm.js';
export { default as ModalHeader } from './ModalHeader/index.esm.js';
import { useModalManager, modalManager } from './modalManager.esm.js';
export { default as ModalTitle } from './ModalTitle/index.esm.js';
import Portal from './Portal.esm.js';
import { useModalStyles } from './styles.esm.js';
import { useScrollLock } from './useScrollLock.esm.js';

var Modal = function Modal(props) {
  var open = props.open,
      _props$blockScroll = props.blockScroll,
      blockScroll = _props$blockScroll === void 0 ? true : _props$blockScroll,
      _props$closeOnEsc = props.closeOnEsc,
      closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,
      _props$closeOnOverlay = props.closeOnOverlayClick,
      closeOnOverlayClick = _props$closeOnOverlay === void 0 ? true : _props$closeOnOverlay,
      container = props.container,
      _props$role = props.role,
      role = _props$role === void 0 ? 'dialog' : _props$role,
      ariaDescribedby = props.ariaDescribedby,
      ariaLabelledby = props.ariaLabelledby,
      modalId = props.modalId,
      onClose = props.onClose,
      onEscKeyDown = props.onEscKeyDown,
      _props$trapFocus = props.trapFocus,
      trapFocus = _props$trapFocus === void 0 ? true : _props$trapFocus,
      _props$autoFocus = props.autoFocus,
      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,
      initialFocusRef = props.initialFocusRef,
      finalFocusRef = props.finalFocusRef,
      _props$returnFocusOnC = props.returnFocusOnClose,
      returnFocusOnClose = _props$returnFocusOnC === void 0 ? true : _props$returnFocusOnC,
      onOverlayClick = props.onOverlayClick,
      onAnimationEnd = props.onAnimationEnd,
      children = props.children,
      _props$disableDefault = props.disableDefaultStyles,
      disableDefaultStyles = _props$disableDefault === void 0 ? false : _props$disableDefault,
      stylesProp = props.styles,
      modalClassName = props.modalClassName,
      modalContainerClassName = props.modalContainerClassName,
      overlayClassName = props.overlayClassName,
      overlayOpenClassName = props.overlayOpenClassName,
      modalOpenClassName = props.modalOpenClassName,
      _props$size = props.size,
      size = _props$size === void 0 ? 'md' : _props$size,
      rootClassName = props.rootClassName,
      _props$useInert = props.useInert,
      useInert = _props$useInert === void 0 ? true : _props$useInert;
  var refModal = useRef(null);
  var refShouldClose = useRef(null);
  var refContainer = useRef(null);
  var styles = getStylesObject(useModalStyles(_extends({}, props, {
    size: size
  })), disableDefaultStyles);

  if (refContainer.current === null && !isSSR()) {
    refContainer.current = document.createElement('div');
  }

  var _useState = useState(false),
      showPortal = _useState[0],
      setShowPortal = _useState[1];

  useModalManager(refModal, open);
  useScrollLock(refModal, open, showPortal, blockScroll);

  var handleKeydown = function handleKeydown(event) {
    if (event.keyCode !== 27 || !modalManager.isTopModal(refModal)) {
      return;
    }

    onEscKeyDown == null ? void 0 : onEscKeyDown(event);

    if (closeOnEsc) {
      onClose();
    }
  };

  var handleOpen = function handleOpen() {
    if (refContainer.current && !container && !document.body.contains(refContainer.current)) {
      document.body.appendChild(refContainer.current);
    }

    document.addEventListener('keydown', handleKeydown);
  };

  var handleClose = function handleClose() {
    if (refContainer.current && !container && document.body.contains(refContainer.current)) {
      document.body.removeChild(refContainer.current);
    }

    document.removeEventListener('keydown', handleKeydown);
  };

  useEffect(function () {
    return function () {
      if (showPortal) {
        handleClose();
      }
    };
  }, [showPortal]);
  useEffect(function () {
    if (open && !showPortal) {
      setShowPortal(true);
      handleOpen();
    }
  }, [open]);

  var handleClickOverlay = function handleClickOverlay(event) {
    if (refShouldClose.current === null) {
      refShouldClose.current = true;
    }

    if (!refShouldClose.current) {
      refShouldClose.current = null;
      return;
    }

    onOverlayClick == null ? void 0 : onOverlayClick(event);

    if (closeOnOverlayClick) {
      onClose();
    }

    refShouldClose.current = null;
  };

  var handleModalEvent = function handleModalEvent() {
    refShouldClose.current = false;
  };

  var handleAnimationEnd = function handleAnimationEnd() {
    if (!open) {
      setShowPortal(false);
    }

    onAnimationEnd == null ? void 0 : onAnimationEnd();
  };

  var containerModal = container || refContainer.current;
  var context = {
    titleId: ariaLabelledby,
    bodyId: ariaDescribedby,
    disableDefaultStyles: disableDefaultStyles,
    size: size,
    onClose: onClose,
    open: open
  };
  return showPortal && containerModal ? jsx(Portal, {
    target: containerModal,
    children: jsx(ModalContextProvider, {
      value: context,
      children: jsxs(FocusLock, {
        autoFocus: autoFocus,
        disabled: !trapFocus,
        contentRef: refModal,
        initialFocusRef: initialFocusRef,
        finalFocusRef: finalFocusRef,
        restoreFocus: returnFocusOnClose,
        children: [jsxs(Box, {
          className: rootClassName,
          css: stylesProp,
          children: [jsx(Box, {
            className: classnames(overlayClassName, open ? overlayOpenClassName : ''),
            "aria-hidden": true,
            css: styles.overlay,
            children: jsx(Box, {
              css: styles.overlayInner
            })
          }), jsx(Box, {
            ref: refModal,
            className: modalContainerClassName,
            css: styles.container,
            "data-testid": "modal-container",
            onAnimationEnd: handleAnimationEnd,
            onClick: handleClickOverlay,
            children: jsx(Box, {
              "data-testid": "modal",
              className: classnames(modalClassName, open ? modalOpenClassName : ''),
              onMouseDown: handleModalEvent,
              onMouseUp: handleModalEvent,
              onClick: handleModalEvent,
              id: modalId,
              role: role,
              "aria-modal": "true",
              "aria-labelledby": ariaLabelledby,
              "aria-describedby": ariaDescribedby,
              css: styles.content,
              children: children
            })
          })]
        }), jsx(AriaHidden, {
          refModal: refModal,
          shouldHide: open && useInert
        })]
      })
    })
  }) : null;
};

if (__DEV__) {
  Modal.displayName = 'Modal';
}

export default Modal;
//# sourceMappingURL=index.esm.js.map
