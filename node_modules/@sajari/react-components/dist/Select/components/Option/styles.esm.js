import { mapStyles } from '@sajari/react-sdk-utils';
import '../../../hooks/useBorderRadius.esm.js';
import { useDropdownItemStyles } from '../../../hooks/useDropdownItemStyles.esm.js';
import '../../../hooks/useDropdownStyles.esm.js';
import '../../../hooks/useFirstRender.esm.js';
import '../../../hooks/useRingStyles.esm.js';
import '../../../hooks/useFocusRingStyles.esm.js';
import useFontSize from '../../../hooks/useFontSize.esm.js';
import '../../../hooks/useInputStyles.esm.js';
import '../../../hooks/useJustifyContent.esm.js';
import '../../../hooks/useSpacing.esm.js';
import '../../../hooks/useVoiceInput.esm.js';
import 'use-resize-observer/polyfilled';

function useOptionStyles(params) {
  var size = params.size,
      highlighted = params.highlighted,
      selected = params.selected,
      disabled = params.disabled;
  var fontSizeStyles = useFontSize({
    size: size
  });

  var _useCoreDropdownItemS = useDropdownItemStyles({
    highlighted: highlighted
  }),
      root = _useCoreDropdownItemS.root,
      label = _useCoreDropdownItemS.label;

  var styles = {
    option: [root, disabled ? {
      "--text-opacity": "1",
      "color": "rgba(159, 166, 178, var(--text-opacity))",
      "cursor": "not-allowed"
    } : null, {
      ":last-child": {
        "marginBottom": "0.25rem"
      }
    }],
    children: [{
      "flex": "1 1 0%"
    }, selected ? {
      "paddingLeft": "0.25rem"
    } : {
      "paddingLeft": "1rem"
    }, fontSizeStyles],
    label: [label]
  };
  return {
    styles: mapStyles(styles)
  };
}

export { useOptionStyles };
//# sourceMappingURL=styles.esm.js.map
