import { extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { getStylesObject } from '@sajari/react-sdk-utils';
import { useMemo } from 'react';
import { jsxs, jsx } from '@emotion/core/jsx-runtime';
import Box from '../../../Box/index.esm.js';
import '../../../assets/icons/check.esm.js';
import '../../../assets/icons/chevron-left.esm.js';
import '../../../assets/icons/chevron-right.esm.js';
import '../../../assets/icons/down-key.esm.js';
import '../../../assets/icons/empty-mic.esm.js';
import '../../../assets/icons/enter-key.esm.js';
import '../../../assets/icons/mic.esm.js';
import '../../../assets/icons/search.esm.js';
import IconSmallCheck from '../../../assets/icons/small-check.esm.js';
import '../../../assets/icons/small-search.esm.js';
import '../../../assets/icons/small-star.esm.js';
import '../../../assets/icons/spinner.esm.js';
import '../../../assets/icons/up-key.esm.js';
import '../../../assets/icons/close.esm.js';
import { useSelectContext } from '../../context.esm.js';
import { useOptionStyles } from './styles.esm.js';

var Option = function Option(props) {
  var children = props.children,
      value = props.value,
      disabled = props.disabled,
      label = props.label;

  var _useSelectContext = useSelectContext(),
      getItemProps = _useSelectContext.getItemProps,
      highlightedIndex = _useSelectContext.highlightedIndex,
      items = _useSelectContext.items,
      size = _useSelectContext.size,
      selectedItems = _useSelectContext.selectedItems,
      disableDefaultStyles = _useSelectContext.disableDefaultStyles,
      customClassNames = _useSelectContext.customClassNames;

  var _React$useMemo = useMemo(function () {
    var i = items.find(function (_ref) {
      var v = _ref.value;
      return v === value;
    });
    var idx = items.findIndex(function (_ref2) {
      var v = _ref2.value;
      return v === value;
    });
    return [i, idx];
  }, [value, JSON.stringify(items)]),
      item = _React$useMemo[0],
      index = _React$useMemo[1];

  var selected = typeof value !== 'undefined' && selectedItems.includes(value.toString());
  var highlighted = index === highlightedIndex;

  var _useOptionStyles = useOptionStyles(_extends({}, props, {
    highlighted: highlighted,
    selected: selected,
    size: size
  })),
      optionStyles = _useOptionStyles.styles;

  var styles = getStylesObject(optionStyles, disableDefaultStyles);
  return jsxs(Box, _extends({
    as: "li",
    css: styles.option
  }, getItemProps({
    item: item,
    index: index,
    disabled: disabled
  }), {
    className: customClassNames.optionClassName,
    children: [selected && jsx(IconSmallCheck, {}), jsx(Box, {
      as: "span",
      css: styles.children,
      children: children
    }), label && jsx(Box, {
      as: "span",
      css: styles.label,
      children: label
    })]
  }), value);
};

export default Option;
//# sourceMappingURL=index.esm.js.map
