import { extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { mapStyles } from '@sajari/react-sdk-utils';
import '../../../hooks/useBorderRadius.esm.js';
import '../../../hooks/useDropdownItemStyles.esm.js';
import '../../../hooks/useDropdownStyles.esm.js';
import '../../../hooks/useFirstRender.esm.js';
import '../../../hooks/useRingStyles.esm.js';
import '../../../hooks/useFocusRingStyles.esm.js';
import '../../../hooks/useFontSize.esm.js';
import useInputStyles from '../../../hooks/useInputStyles.esm.js';
import '../../../hooks/useJustifyContent.esm.js';
import '../../../hooks/useSpacing.esm.js';
import '../../../hooks/useVoiceInput.esm.js';
import 'use-resize-observer/polyfilled';

function useRangeInputStyles(props) {
  var max = props.max,
      step = props.step;

  var _useInputStyles = useInputStyles(_extends({
    type: 'text',
    size: 'sm'
  }, props)),
      inputStyles = _useInputStyles.styles,
      focusRingStyles = _useInputStyles.focusRingStyles,
      focusProps = _useInputStyles.focusProps;

  var charLength = (max + step).toString().length;
  var styles = {
    container: [{
      "position": "relative"
    }, focusRingStyles],
    input: [{
      "appearance": "none",
      "backgroundColor": "#ffffff",
      "borderColor": "#d2d6dc",
      "borderWidth": "1px",
      "borderRadius": "0.375rem",
      "paddingTop": "0.5rem",
      "paddingRight": "0.75rem",
      "paddingBottom": "0.5rem",
      "paddingLeft": "0.75rem",
      "fontSize": "1rem",
      "lineHeight": "1.5",
      "::placeholder": {
        "color": "#9fa6b2",
        "opacity": "1"
      },
      ":focus": {
        "outline": "none",
        "boxShadow": "0 0 0 3px rgba(164, 202, 254, 0.45)",
        "borderColor": "#a4cafe"
      }
    }, inputStyles, "width: calc(" + charLength * 9 + "px + 2.5rem)"]
  };
  return {
    styles: mapStyles(styles),
    focusProps: focusProps
  };
}

export default useRangeInputStyles;
//# sourceMappingURL=styles.esm.js.map
